x.labels <- sapply(x.ticks, function(i) as.expression(bquote(10^ .(i))))
axis(4, at=c(1e+04, 1e+05, 1e+06, 1e+07, 1e+08, 1e+09), labels=x.labels,
lwd.ticks = 2, cex.axis = 1.25, las = 1)
# Close plot device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("./../../../figures/FigS1Z.png")
grid.raster(img)
png(filename="~/GitHub/MinimalCell/figures/FigS1Z.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mfrow=c(2,1))
#par(mar=c(2,8,2,8), xpd = TRUE)
par(xpd=FALSE)
par(mar=c(2,8,2,8))
par(oma=c(4,0,2,0))
# Non-minimal points
# Create plot with absorbance data first
plot(t, nm.plot, xlim = c(-2, 32), ylim = c(0.5, 2), type = "l",
col = "white", cex = 1.0, ylab = "", xlab = "",
cex.lab = 2.0, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add axes and labels for absorbance data
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0", "10", "20", "30"), at = c(0, 10, 20, 30))
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.75", "1.25", "1.75"), at = c(0.75, 1.25, 1.75))
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(0, 10, 20, 30), labels = F)
mtext(expression('Time (h)'), side = 1,
outer = TRUE, cex = 2, line = 2.5, adj = 0.5)
mtext(expression('Absorbance (a'[415]*')'), side = 2, outer = TRUE,
cex = 2, line = -2.5, adj = 0.55)
mtext(expression('Cells mL'^-1), side = 4, outer = TRUE,
cex = 2, line = -2.5, adj = 0.55)
text(25, 0.65, labels = "Non-minimal", cex = 1.25)
text(10, 0.6, labels = "Lag", cex = 0.85, col = "grey")
text(3, 1.5, labels = "Yield", cex = 0.85, col = "grey")
text(17, 1.75, expression(paste(mu, "max")), cex = 0.85, col = "grey")
# Add lines for yield
abline(h = nm.mean.parms[1,2] + nm.mean.parms[1,1], lty = 2,
col = "grey", lwd = 2)
# Add lines for umax
abline(-nm.mean.parms[1,3]*(nm.mean.parms[1,4] -
(nm.mean.parms[1,1]/nm.mean.parms[1,3])), nm.mean.parms[1,3],
lty = 2, col = "grey", lwd = 2)
# Add lines for lag
abline(v = nm.mean.parms[1,4], lty = 2, col = "gray", lwd = 2)
# Add second axis for MPN values
par(new = TRUE)
plot(nm.mpn.out[,1], nm.mpn.out[,3], xlim = c(-2,32), ylim = c(10000, 1e+10),
type = "p", pch = 21, col = "lightblue", bg = "lightblue",
cex = 1.0, log = "y", ylab = "", xlab = "", cex.lab = 2.0, las = 1,
lwd = 2, yaxt = "n", xaxt = "n")
# Add axes and labels
x.ticks <- c(5,6,7,8,9)
x.labels <- sapply(x.ticks, function(i) as.expression(bquote(10^ .(i))))
axis(4, at=c(1e+05, 1e+06, 1e+07, 1e+08, 1e+09), labels=x.labels,
lwd.ticks = 2, cex.axis = 1.25, las = 1)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0", "10", "20", "30"), at = c(0, 10, 20, 30))
# Add Gompertz line in front of other data
par(new = TRUE)
plot(t, nm.plot, xlim = c(-2, 32), ylim = c(0.5, 2), type = "l",
col = "blue", cex = 1.0, ylab = "", xlab = "",
cex.lab = 2.0, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
# Minimal points
# Create plot with absorbance data first
plot(t, m.plot, xlim = c(-2, 32), ylim = c(0.65, 1.25), type = "l",
col = "red", cex = 1.0, ylab = "", xlab = "",
cex.lab = 2.0, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add axes and labels for absorbance data
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0", "10", "20", "30"), at = c(0, 10, 20, 30))
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.85", "1.00", "1.15"), at = c(0.85, 1, 1.15))
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(0, 10, 20, 30), labels = F)
text(26, 0.7, labels = "Minimal", cex = 1.25)
text(15, 0.68, labels = "Lag", cex = 0.85, col = "grey")
text(5, 1.05, labels = "Yield", cex = 0.85, col = "grey")
text(28, 1.15, expression(paste(mu, "max")), cex = 0.85, col = "grey")
#text(25, 1.15, expression(paste(italic(,mu,'umax'))), cex = 0.85, col = "grey")
# Add lines for yield
abline(h = m.mean.parms[1,2] + m.mean.parms[1,1], lty = 2,
col = "grey", lwd = 2)
# Add lines for umax
abline(-m.mean.parms[1,3]*(m.mean.parms[1,4] -
(m.mean.parms[1,1]/m.mean.parms[1,3])), m.mean.parms[1,3],
lty = 2, col = "grey", lwd = 2)
# Add lines for lag
abline(v = m.mean.parms[1,4], lty = 2, col = "gray", lwd = 2)
# Add second axis for MPN values
par(new = TRUE)
plot(m.mpn.out[,1], m.mpn.out[,3], xlim = c(-2,32), ylim = c(100, 1e+10),
type = "p", pch = 21, col = "pink", bg = "pink",
cex = 1.0, log = "y", ylab = "", xlab = "", cex.lab = 2.0, las = 1,
lwd = 2, yaxt = "n", xaxt = "n")
# Add axes and labels
x.ticks <- c(4,5,6,7,8,9)
x.labels <- sapply(x.ticks, function(i) as.expression(bquote(10^ .(i))))
axis(4, at=c(1e+04, 1e+05, 1e+06, 1e+07, 1e+08, 1e+09), labels=x.labels,
lwd.ticks = 2, cex.axis = 1.25, las = 1)
# Close plot device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("./../../../figures/FigS1Z.png")
grid.raster(img)
png(filename="~/GitHub/MinimalCell/figures/FigS1Z.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mfrow=c(2,1))
#par(mar=c(2,8,2,8), xpd = TRUE)
par(xpd=FALSE)
par(mar=c(2,8,2,8))
par(oma=c(4,0,2,0))
# Non-minimal points
# Create plot with absorbance data first
plot(t, nm.plot, xlim = c(-2, 32), ylim = c(0.5, 2), type = "l",
col = "white", cex = 1.0, ylab = "", xlab = "",
cex.lab = 2.0, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add axes and labels for absorbance data
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0", "10", "20", "30"), at = c(0, 10, 20, 30))
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.75", "1.25", "1.75"), at = c(0.75, 1.25, 1.75))
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(0, 10, 20, 30), labels = F)
mtext(expression('Time (h)'), side = 1,
outer = TRUE, cex = 2, line = 2.5, adj = 0.5)
mtext(expression('Absorbance (a'[415]*')'), side = 2, outer = TRUE,
cex = 2, line = -2.5, adj = 0.55)
mtext(expression('Cells mL'^-1), side = 4, outer = TRUE,
cex = 2, line = -2.5, adj = 0.55)
text(25, 0.65, labels = "Non-minimal", cex = 1.25)
text(10, 0.6, labels = "Lag", cex = 0.85, col = "grey")
text(3, 1.5, labels = "Yield", cex = 0.85, col = "grey")
text(17, 1.75, expression(paste(mu, "max")), cex = 0.85, col = "grey")
# Add lines for yield
abline(h = nm.mean.parms[1,2] + nm.mean.parms[1,1], lty = 2,
col = "grey", lwd = 2)
# Add lines for umax
abline(-nm.mean.parms[1,3]*(nm.mean.parms[1,4] -
(nm.mean.parms[1,1]/nm.mean.parms[1,3])), nm.mean.parms[1,3],
lty = 2, col = "grey", lwd = 2)
# Add lines for lag
abline(v = nm.mean.parms[1,4], lty = 2, col = "gray", lwd = 2)
# Add second axis for MPN values
par(new = TRUE)
plot(nm.mpn.out[,1], nm.mpn.out[,3], xlim = c(-2,32), ylim = c(10000, 1e+10),
type = "p", pch = 21, col = "lightblue", bg = "lightblue",
cex = 1.0, log = "y", ylab = "", xlab = "", cex.lab = 2.0, las = 1,
lwd = 2, yaxt = "n", xaxt = "n")
# Add axes and labels
x.ticks <- c(5,6,7,8,9)
x.labels <- sapply(x.ticks, function(i) as.expression(bquote(10^ .(i))))
axis(4, at=c(1e+05, 1e+06, 1e+07, 1e+08, 1e+09), labels=x.labels,
lwd.ticks = 2, cex.axis = 1.25, las = 1)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0", "10", "20", "30"), at = c(0, 10, 20, 30))
# Add Gompertz line in front of other data
par(new = TRUE)
plot(t, nm.plot, xlim = c(-2, 32), ylim = c(0.5, 2), type = "l",
col = "blue", cex = 1.0, ylab = "", xlab = "",
cex.lab = 2.0, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
# Minimal points
# Create plot with absorbance data first
plot(t, m.plot, xlim = c(-2, 32), ylim = c(0.65, 1.25), type = "l",
col = "red", cex = 1.0, ylab = "", xlab = "",
cex.lab = 2.0, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add axes and labels for absorbance data
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0", "10", "20", "30"), at = c(0, 10, 20, 30))
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.85", "1.00", "1.15"), at = c(0.85, 1, 1.15))
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(0, 10, 20, 30), labels = F)
text(26, 0.7, labels = "Minimal", cex = 1.25)
text(15, 0.68, labels = "Lag", cex = 0.85, col = "grey")
text(5, 1.08, labels = "Yield", cex = 0.85, col = "grey")
text(28, 1.15, expression(paste(mu, "max")), cex = 0.85, col = "grey")
#text(25, 1.15, expression(paste(italic(,mu,'umax'))), cex = 0.85, col = "grey")
# Add lines for yield
abline(h = m.mean.parms[1,2] + m.mean.parms[1,1], lty = 2,
col = "grey", lwd = 2)
# Add lines for umax
abline(-m.mean.parms[1,3]*(m.mean.parms[1,4] -
(m.mean.parms[1,1]/m.mean.parms[1,3])), m.mean.parms[1,3],
lty = 2, col = "grey", lwd = 2)
# Add lines for lag
abline(v = m.mean.parms[1,4], lty = 2, col = "gray", lwd = 2)
# Add second axis for MPN values
par(new = TRUE)
plot(m.mpn.out[,1], m.mpn.out[,3], xlim = c(-2,32), ylim = c(100, 1e+10),
type = "p", pch = 21, col = "pink", bg = "pink",
cex = 1.0, log = "y", ylab = "", xlab = "", cex.lab = 2.0, las = 1,
lwd = 2, yaxt = "n", xaxt = "n")
# Add axes and labels
x.ticks <- c(4,5,6,7,8,9)
x.labels <- sapply(x.ticks, function(i) as.expression(bquote(10^ .(i))))
axis(4, at=c(1e+04, 1e+05, 1e+06, 1e+07, 1e+08, 1e+09), labels=x.labels,
lwd.ticks = 2, cex.axis = 1.25, las = 1)
# Close plot device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("./../../../figures/FigS1Z.png")
grid.raster(img)
png(filename="~/GitHub/MinimalCell/figures/FigS1.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mfrow=c(2,1))
#par(mar=c(2,8,2,8), xpd = TRUE)
par(xpd=FALSE)
par(mar=c(2,8,2,8))
par(oma=c(4,0,2,0))
# Non-minimal points
# Create plot with absorbance data first
plot(t, nm.plot, xlim = c(-2, 32), ylim = c(0.5, 2), type = "l",
col = "white", cex = 1.0, ylab = "", xlab = "",
cex.lab = 2.0, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add axes and labels for absorbance data
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0", "10", "20", "30"), at = c(0, 10, 20, 30))
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.75", "1.25", "1.75"), at = c(0.75, 1.25, 1.75))
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(0, 10, 20, 30), labels = F)
mtext(expression('Time (h)'), side = 1,
outer = TRUE, cex = 2, line = 2.5, adj = 0.5)
mtext(expression('Absorbance (a'[415]*')'), side = 2, outer = TRUE,
cex = 2, line = -2.5, adj = 0.55)
mtext(expression('Cells mL'^-1), side = 4, outer = TRUE,
cex = 2, line = -2.5, adj = 0.55)
text(25, 0.65, labels = "Non-minimal", cex = 1.25)
text(10, 0.6, labels = "Lag", cex = 0.85, col = "grey")
text(3, 1.5, labels = "Yield", cex = 0.85, col = "grey")
text(17, 1.75, expression(paste(mu, "max")), cex = 0.85, col = "grey")
# Add lines for yield
abline(h = nm.mean.parms[1,2] + nm.mean.parms[1,1], lty = 2,
col = "grey", lwd = 2)
# Add lines for umax
abline(-nm.mean.parms[1,3]*(nm.mean.parms[1,4] -
(nm.mean.parms[1,1]/nm.mean.parms[1,3])), nm.mean.parms[1,3],
lty = 2, col = "grey", lwd = 2)
# Add lines for lag
abline(v = nm.mean.parms[1,4], lty = 2, col = "gray", lwd = 2)
# Add second axis for MPN values
par(new = TRUE)
plot(nm.mpn.out[,1], nm.mpn.out[,3], xlim = c(-2,32), ylim = c(10000, 1e+10),
type = "p", pch = 21, col = "lightblue", bg = "lightblue",
cex = 1.0, log = "y", ylab = "", xlab = "", cex.lab = 2.0, las = 1,
lwd = 2, yaxt = "n", xaxt = "n")
# Add axes and labels
x.ticks <- c(5,6,7,8,9)
x.labels <- sapply(x.ticks, function(i) as.expression(bquote(10^ .(i))))
axis(4, at=c(1e+05, 1e+06, 1e+07, 1e+08, 1e+09), labels=x.labels,
lwd.ticks = 2, cex.axis = 1.25, las = 1)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0", "10", "20", "30"), at = c(0, 10, 20, 30))
# Add Gompertz line in front of other data
par(new = TRUE)
plot(t, nm.plot, xlim = c(-2, 32), ylim = c(0.5, 2), type = "l",
col = "blue", cex = 1.0, ylab = "", xlab = "",
cex.lab = 2.0, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
# Minimal points
# Create plot with absorbance data first
plot(t, m.plot, xlim = c(-2, 32), ylim = c(0.65, 1.25), type = "l",
col = "red", cex = 1.0, ylab = "", xlab = "",
cex.lab = 2.0, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add axes and labels for absorbance data
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0", "10", "20", "30"), at = c(0, 10, 20, 30))
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.85", "1.00", "1.15"), at = c(0.85, 1, 1.15))
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(0, 10, 20, 30), labels = F)
text(26, 0.7, labels = "Minimal", cex = 1.25)
text(15, 0.68, labels = "Lag", cex = 0.85, col = "grey")
text(5, 1.08, labels = "Yield", cex = 0.85, col = "grey")
text(28, 1.15, expression(paste(mu, "max")), cex = 0.85, col = "grey")
# Add lines for yield
abline(h = m.mean.parms[1,2] + m.mean.parms[1,1], lty = 2,
col = "grey", lwd = 2)
# Add lines for umax
abline(-m.mean.parms[1,3]*(m.mean.parms[1,4] -
(m.mean.parms[1,1]/m.mean.parms[1,3])), m.mean.parms[1,3],
lty = 2, col = "grey", lwd = 2)
# Add lines for lag
abline(v = m.mean.parms[1,4], lty = 2, col = "gray", lwd = 2)
# Add second axis for MPN values
par(new = TRUE)
plot(m.mpn.out[,1], m.mpn.out[,3], xlim = c(-2,32), ylim = c(100, 1e+10),
type = "p", pch = 21, col = "pink", bg = "pink",
cex = 1.0, log = "y", ylab = "", xlab = "", cex.lab = 2.0, las = 1,
lwd = 2, yaxt = "n", xaxt = "n")
# Add axes and labels
x.ticks <- c(4,5,6,7,8,9)
x.labels <- sapply(x.ticks, function(i) as.expression(bquote(10^ .(i))))
axis(4, at=c(1e+04, 1e+05, 1e+06, 1e+07, 1e+08, 1e+09), labels=x.labels,
lwd.ticks = 2, cex.axis = 1.25, las = 1)
# Close plot device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("./../../../figures/FigS1.png")
grid.raster(img)
rm(list=ls())
require("knitr")
getwd()
setwd("~/GitHub/MinimalCell")
getwd()
require("png")
require("dplyr")
require("grid")
require("tidyverse")
sem <- function(x) sqrt(var(x)/length(x))
size.raw <-read.csv("~/GitHub/MinimalCell/datafiles/SEM_Stein_cases.csv")
size.raw <- as_tibble(size.raw)
colnames(size.raw) <- c("strain", "timepoint", "sub.strain", "diameter")
size.raw <- mutate(size.raw, volume = 4/3*pi*(diameter/2)^3)
size <- size.raw %>%
filter(timepoint != "Mutant") %>%
group_by(strain, timepoint) %>%
summarise(mean = mean(diameter), sem = sem(diameter),
mean.v=mean(volume),sem.v=sem(volume), n = length(diameter))
size$strain <- as.factor(size$strain)
size$timepoint <- as.factor(size$timepoint)
# Add x-values for plotting
time.x <- c(1,3,1,3)
size <- data.frame(size, time.x)
#fsize <- data.frame(fsize, time.x)
#esize <- data.frame(esize, time.x)
```
## Statistical tests
```{r}
# Subset data
size.reps <- size.raw %>%
dplyr::select(strain, timepoint, sub.strain, diameter, volume) %>%
group_by(timepoint, strain, sub.strain) %>%
summarize(mean.diam = mean(diameter),mean.vol=mean(volume))
s1_anc.reps <- filter(size.raw, sub.strain == "s1_anc")
B_anc.reps <- filter(size.raw, sub.strain == "B_anc")
# Cell diameter
## Ancestral lines
# Comparison of ancestral minimal and ancestral non-minimal
equal.var.anc <- var.test(s1_anc.reps$diameter, B_anc.reps$diameter)
# Test for equal variance: p-value = 0.2658 --> homogeneous variance
anc.t.test <- t.test(x = s1_anc.reps$diameter, B_anc.reps$diameter,
alternative = "two.sided", var.equal = TRUE, mu = 0)
# Results: t = 7.2946, df = 61, p-value = 2.322EE-11
# non-minimal mean diameter: 439 nm; minimal mean diameter: 305 nm
# Genome minimization led to a 70% or 1.4-fold reduction diameter
## Evolved lines
# 1. Comparison of evolved minimal and evolved non-minimal
evo.reps <- filter(size.reps, timepoint == "Evolved") %>%
group_by(strain, sub.strain)
equal.var.evo <- var.test(evo.reps$mean.diam[1:4], evo.reps$mean.diam[5:8])
# Test for equal variance: p-value = 0.05954
evo.t.test <- t.test(log10(evo.reps$mean.diam) ~ evo.reps$strain)
# Results: t = -3.9561, df = 4.7605, p-value = 0.01189
# mean of evolved min: 375 nm; mean of evolved non-min: 792 nm
# evolved non-min is 112% or 2.11-fold larger than evolved non-min
# 2. Evolution of cell size in non-minimal cell
# log-10 transformed to deal with variance
s1_delta.t.test <- t.test(x = log10(evo.reps$mean.diam[5:8]),
mu = log10(size.reps$mean.diam[2]), alternative = 'two.sided')
# Results =  t = 3.4803, df = 3, p-value = 0.04005
# mean of non-minimal ancestor: 439 nm; mean of non-minimal evolved: 792 nm
# 80% increase or 1.8-fold increase
# 3. Evolution of cell size in minimal cell
B_delta.t.test <- t.test(x = evo.reps$mean.diam[1:4],
mu = size.reps$mean.diam[1], alternative = 't')
# Results: t = 2.0305, df = 3, p-value = 0.1353
# log-transformed = 2.1622, df = 3, p-value = 0.1193
# Minimal ancestor is 305 nm, minimal evolved is 375 nm on average)
# No change in minimal cell
## Cell volume
## Ancestral lines
equal.var.anc.v <- var.test(s1_anc.reps$volume, B_anc.reps$volume)
# Test for equal variance: p-value = 0.2.974EE-05 --> heterogeneous variance
anc.t.test.v <- t.test(x = s1_anc.reps$volume, B_anc.reps$volume,
alternative = "two.sided", var.equal = F, mu = 0)
# Difference in cell size between non-minimal and minimal of ancestors?
# Results: t = 5.8935, df = 95.517, p-value = 5.667EE-08
# non-minimal mean vol: 0.051 um3; minimal mean diameter: 0.021 um3
# Genome minimization led to a 41% or 2.4-fold reduction in volume
## Evolved lines
# 1. comparison of evolved minimal and evolved non-minimal
equal.var.evo.v <- var.test(evo.reps$mean.vol[1:4], evo.reps$mean.vol[5:8])
# Test for equal variance: p-value = 0.000302 --> heterogeneous variance
#evo.t.test.v <- t.test(evo.reps$mean.vol ~ evo.reps$strain, var.equal = F)
# log-10 transformed to deal with variance
evo.t.test.v <- t.test(log10(evo.reps$mean.vol) ~ evo.reps$strain, var.equal = T)
# log-10 transformed results: t = -3.7008, df = 6, p-value = 0.01008
# mean of evolved minimal: 0.0399 um3; mean of evolved non-minimal: 0.5087 um3
# evolved non-min is 1175% or 12.8-fold larger than evolved non-min
# 2. Evolution of cell size in non-minimal cell
s1_delta.t.test.v <- t.test(x = log10(evo.reps$mean.vol[5:8]),
mu = log10(size.reps$mean.vol[2]), alternative = 'two.sided')
# non-log10-transformed results: t = 1.6478, df = 3, p-value = 0.1979
# log-10 transformed results: t = 3.3869, df = 3, p-value = 0.04287
# mean of non-minimal ancestor: 0.0512 um3; mean of non-minimal evolved: 0.5087 um3
# evolved non-min is 917% or 10-fold larger than evolved non-min
# 3. Evolution of cell size in minimal cell
B_delta.t.test.v <- t.test(x = evo.reps$mean.vol[1:4],
mu = size.reps$mean.vol[1], alternative = 't')
# non-log10-transformed results: t = 1.4667, df = 3, p-value = 0.2387
# log-10 transformed results: t = 1.7141, df = 3, p-value = 0.185
# mean of non-minimal ancestor: 0.0213 um3; mean of non-minimal evolved: 0.0399 um3
# no significant increase in volume
min.anc.rand.all <- size.raw %>%
filter(strain == "Minimal" & timepoint == "Ancestor")
set.seed(2)
min.anc.rand <- sample(min.anc.rand.all$diameter, size = 60)
nmin.anc.rand.all <- size.raw %>%
filter(strain == "Non-minimal" & timepoint == "Ancestor")
set.seed(2)
nmin.anc.rand <- sample(nmin.anc.rand.all$diameter, size = 60)
# randomly sample from evolved replicate populations
min.evo.rand.B_1.all <- size.raw %>%
filter(strain == "Minimal" & timepoint == "Evolved" & sub.strain == "B_1")
set.seed(2)
min.evo.rand.B_1 <- sample(min.evo.rand.B_1.all$diameter, size = 15)
min.evo.rand.B_2.all <- size.raw %>%
filter(strain == "Minimal" & timepoint == "Evolved" & sub.strain == "B_2")
set.seed(2)
min.evo.rand.B_2 <- sample(min.evo.rand.B_2.all$diameter, size = 15)
min.evo.rand.B_3.all <- size.raw %>%
filter(strain == "Minimal" & timepoint == "Evolved" & sub.strain == "B_3")
set.seed(2)
min.evo.rand.B_3 <- sample(min.evo.rand.B_3.all$diameter, size = 15)
min.evo.rand.B_5.all <- size.raw %>%
filter(strain == "Minimal" & timepoint == "Evolved" & sub.strain == "B_3")
set.seed(2)
min.evo.rand.B_5 <- sample(min.evo.rand.B_5.all$diameter, size = 15)
nmin.evo.rand.s1_1.all <- size.raw %>%
filter(strain == "Non-minimal" & timepoint == "Evolved" & sub.strain == "s1_1")
set.seed(2)
nmin.evo.rand.s1_1 <- sample(nmin.evo.rand.s1_1.all$diameter, size = 15)
nmin.evo.rand.s1_3.all <- size.raw %>%
filter(strain == "Non-minimal" & timepoint == "Evolved" & sub.strain == "s1_3")
set.seed(2)
nmin.evo.rand.s1_3 <- sample(nmin.evo.rand.s1_3.all$diameter, size = 15)
nmin.evo.rand.s1_4.all <- size.raw %>%
filter(strain == "Non-minimal" & timepoint == "Evolved" & sub.strain == "s1_4")
set.seed(2)
nmin.evo.rand.s1_4 <- sample(nmin.evo.rand.s1_4.all$diameter, size = 15)
nmin.evo.rand.s1_6.all <- size.raw %>%
filter(strain == "Non-minimal" & timepoint == "Evolved" & sub.strain == "s1_6")
set.seed(2)
nmin.evo.rand.s1_6 <- sample(nmin.evo.rand.s1_6.all$diameter, size = 15)
# concatenate resampled evolved data
min.evo.rand <- as.data.frame(c(min.evo.rand.B_1,
min.evo.rand.B_2, min.evo.rand.B_3, min.evo.rand.B_5))
colnames(min.evo.rand) <- "diam"
nmin.evo.rand <- as.data.frame(c(nmin.evo.rand.s1_1,
nmin.evo.rand.s1_3, nmin.evo.rand.s1_4, nmin.evo.rand.s1_6))
colnames(nmin.evo.rand) <- "diam"
m.per.diam <- size.reps %>%
filter(strain == "Minimal" & timepoint != "Mutant") %>%
group_by(strain) %>%
mutate(per = ((mean.diam-first(mean.diam))/first(mean.diam))) %>%
filter(timepoint != "Ancestor")
m.per.diam.summary <- m.per.diam %>%
group_by(strain) %>%
dplyr::summarise(mean = mean(per), sem = sem(per))
nm.per.diam <- size.reps %>%
filter(strain == "Non-minimal" & timepoint != "Mutant") %>%
group_by(strain) %>%
mutate(per = ((mean.diam-first(mean.diam))/first(mean.diam))) %>%
filter(timepoint != "Ancestor")
nm.per.diam.summary <- nm.per.diam %>%
group_by(strain) %>%
dplyr::summarise(mean = mean(per), sem = sem(per))
# Percent change diameter statistics
equal.var.per.diam <- var.test(m.per.diam$per, nm.per.diam$per)
# Test for equal variance: p-value = 0.1568 --> variance are equal
#m.per.diam$per <-log10(m.per.diam$per+0.1)
#nm.per.diam$per <-log10(nm.per.diam$per+0.1)
oneway.m.per.diam <- t.test(x = m.per.diam$per, mu = log(0.01), alternative = 'two.sided')
# Percent change not different from zero: t = 2.0305, df = 3, p-value = 0.06764
# Log transform (mu = log(0.01)): t = 9.5383, df = 3, p-value = 0.002444
oneway.nm.per.diam <- t.test(x = nm.per.diam$per, mu = log(0.01), alternative = 'two.sided')
# Percent change marginally increased: t = 2.7619, df = 3, p-value = 0.07004
# Log transform (mu = log(0.01)): t = 23.939, df = 3, p-value = 0.0001597
ttest.per.diam <- t.test(m.per.diam$per, nm.per.diam$per)
# Percent change not different between strains: t = -1.8339, df = 3.8944, p-value = 0.1425
# Log transform: t = -1.7204, df = 4.3033, p-value = 0.1554
m.per.vol <- size.reps %>%
filter(strain == "Minimal" & timepoint != "Mutant") %>%
group_by(strain) %>%
mutate(per = ((mean.vol-first(mean.vol))/first(mean.vol))) %>%
filter(timepoint != "Ancestor")
m.per.vol.summary <- m.per.vol %>%
group_by(strain) %>%
dplyr::summarise(mean = mean(per), sem = sem(per))
nm.per.vol <- size.reps %>%
filter(strain == "Non-minimal" & timepoint != "Mutant") %>%
group_by(strain) %>%
mutate(per = ((mean.vol-first(mean.vol))/first(mean.vol))) %>%
filter(timepoint != "Ancestor")
nm.per.vol.summary <- nm.per.vol %>%
group_by(strain) %>%
dplyr::summarise(mean = mean(per), sem = sem(per))
