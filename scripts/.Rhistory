equal.var <- var.test(dnds.wt.noout$dnds, dnds.min$dnds)
# Test for equal variance : P = 0.132 --> homogeneous variance
# Non-minimal vs. minimal
dnds.ttest <- t.test(dnds.wt.noout$dnds, dnds.min$dnds,
var.equal = TRUE, alternative = 'two.sided')
# Results: t = -0.252, df = 5, p-value = 0.8114 --> no difference
# Non-minimal: dN/dS different from 1?
dnds.nonmin.ttest <- t.test(dnds.wt.noout$dnds, mu = 1, alternative ="two.sided")
# Results: t = -11.025, df = 2, p-value = 0.008. Significantly less than 1.
dnds.ttest
dnds.min.ttest
# Make figure
png(filename="~/GitHub/MinimalCell/figures/FigExt2.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# Add Non-minimal points
plot(jitter(rep(1, length(dnds.wt$dnds)), amount = 0.2), dnds.wt$dnds,
xlim = c(0, 4), ylim = c(0.0, 2.5), type = "p", pch = 21, bg = "lightblue",
col = "lightblue", cex = 1.0, ylab = "", xlab = "",
cex.lab = 2.0, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add horizontal line
abline(h = 1, col="darkgray", lty = 2, lwd = 2)
# Add minimal points
points(jitter(rep(3, length(dnds.min$dnds)), amount = 0.2), dnds.min$dnds,
pch = 21, bg = "pink", col = "pink", lwd = 2, cex = 1.0)
# Add confidence intervals
arrows(x0 = c(1), y0 = mean.dnds.wt, y1 = mean.dnds.wt + sem.dnds.wt, angle = 90,
length = 0.1, lwd = 2, col = "blue")
arrows(x0 = c(1), y0 = mean.dnds.wt, y1 = mean.dnds.wt - sem.dnds.wt, angle = 90,
length=0.1, lwd = 2, col = "blue")
arrows(x0 = c(3), y0 = mean.dnds.min, y1 = mean.dnds.min + sem.dnds.min, angle = 90,
length = 0.1, lwd = 2, col = "red")
arrows(x0 = c(3), y0 = mean.dnds.min, y1 = mean.dnds.min - sem.dnds.min, angle = 90,
length=0.1, lwd = 2, col = "red")
# Add means
points(1, mean.dnds.wt, pch = 22, col = "blue",
bg = "blue", lwd = 2, cex = 2)
points(3, mean.dnds.min, pch = 22, col = "red",
bg = "red", lwd = 2, cex = 2)
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.0", "1.0", "2.0", "3.0"), at = c(0,1, 2, 3))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0, 1, 2, 3), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Non-minimal", "Minimal"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Strain'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.5)
mtext(expression(italic("dN/dS")), side = 2,
outer = TRUE, cex = 1.5, line = -3.0)
# Add P-values
#mtext(expression(~italic("P")~"= 0.488"), line = -2.0, cex = 1.0, at = 0.5)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~/GitHub/MinimalCell/figures/FigExt2.png")
grid.raster(img)
# Make figure
png(filename="~/GitHub/MinimalCell/figures/FigExt2.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# Add Non-minimal points
plot(jitter(rep(1, length(dnds.wt$dnds)), amount = 0.2), dnds.wt$dnds,
xlim = c(0, 4), ylim = c(0.0, 2.65), type = "p", pch = 21, bg = "lightblue",
col = "lightblue", cex = 1.0, ylab = "", xlab = "",
cex.lab = 2.0, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add horizontal line
abline(h = 1, col="darkgray", lty = 2, lwd = 2)
# Add minimal points
points(jitter(rep(3, length(dnds.min$dnds)), amount = 0.2), dnds.min$dnds,
pch = 21, bg = "pink", col = "pink", lwd = 2, cex = 1.0)
# Add confidence intervals
arrows(x0 = c(1), y0 = mean.dnds.wt, y1 = mean.dnds.wt + sem.dnds.wt, angle = 90,
length = 0.1, lwd = 2, col = "blue")
arrows(x0 = c(1), y0 = mean.dnds.wt, y1 = mean.dnds.wt - sem.dnds.wt, angle = 90,
length=0.1, lwd = 2, col = "blue")
arrows(x0 = c(3), y0 = mean.dnds.min, y1 = mean.dnds.min + sem.dnds.min, angle = 90,
length = 0.1, lwd = 2, col = "red")
arrows(x0 = c(3), y0 = mean.dnds.min, y1 = mean.dnds.min - sem.dnds.min, angle = 90,
length=0.1, lwd = 2, col = "red")
# Add means
points(1, mean.dnds.wt, pch = 22, col = "blue",
bg = "blue", lwd = 2, cex = 2)
points(3, mean.dnds.min, pch = 22, col = "red",
bg = "red", lwd = 2, cex = 2)
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.0", "1.0", "2.0", "3.0"), at = c(0,1, 2, 3))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0, 1, 2, 3), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Non-minimal", "Minimal"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Strain'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.5)
mtext(expression(italic("dN/dS")), side = 2,
outer = TRUE, cex = 1.5, line = -3.0)
# Add P-values
#mtext(expression(~italic("P")~"= 0.488"), line = -2.0, cex = 1.0, at = 0.5)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~/GitHub/MinimalCell/figures/FigExt2.png")
grid.raster(img)
# Make figure
png(filename="~/GitHub/MinimalCell/figures/FigExt2.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# Add Non-minimal points
plot(jitter(rep(1, length(dnds.wt$dnds)), amount = 0.2), dnds.wt$dnds,
xlim = c(0, 4), ylim = c(0.0, 2.95), type = "p", pch = 21, bg = "lightblue",
col = "lightblue", cex = 1.0, ylab = "", xlab = "",
cex.lab = 2.0, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add horizontal line
abline(h = 1, col="darkgray", lty = 2, lwd = 2)
# Add minimal points
points(jitter(rep(3, length(dnds.min$dnds)), amount = 0.2), dnds.min$dnds,
pch = 21, bg = "pink", col = "pink", lwd = 2, cex = 1.0)
# Add confidence intervals
arrows(x0 = c(1), y0 = mean.dnds.wt, y1 = mean.dnds.wt + sem.dnds.wt, angle = 90,
length = 0.1, lwd = 2, col = "blue")
arrows(x0 = c(1), y0 = mean.dnds.wt, y1 = mean.dnds.wt - sem.dnds.wt, angle = 90,
length=0.1, lwd = 2, col = "blue")
arrows(x0 = c(3), y0 = mean.dnds.min, y1 = mean.dnds.min + sem.dnds.min, angle = 90,
length = 0.1, lwd = 2, col = "red")
arrows(x0 = c(3), y0 = mean.dnds.min, y1 = mean.dnds.min - sem.dnds.min, angle = 90,
length=0.1, lwd = 2, col = "red")
# Add means
points(1, mean.dnds.wt, pch = 22, col = "blue",
bg = "blue", lwd = 2, cex = 2)
points(3, mean.dnds.min, pch = 22, col = "red",
bg = "red", lwd = 2, cex = 2)
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.0", "1.0", "2.0", "3.0"), at = c(0,1, 2, 3))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0, 1, 2, 3), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Non-minimal", "Minimal"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Strain'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.5)
mtext(expression(italic("dN/dS")), side = 2,
outer = TRUE, cex = 1.5, line = -3.0)
# Add P-values
#mtext(expression(~italic("P")~"= 0.488"), line = -2.0, cex = 1.0, at = 0.5)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~/GitHub/MinimalCell/figures/FigExt2.png")
grid.raster(img)
# Make figure
png(filename="~/GitHub/MinimalCell/figures/FigExt2.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# Add Non-minimal points
plot(jitter(rep(1, length(dnds.wt$dnds)), amount = 0.2), dnds.wt$dnds,
xlim = c(0, 4), ylim = c(-5.0, 3.5), type = "p", pch = 21, bg = "lightblue",
col = "lightblue", cex = 1.0, ylab = "", xlab = "",
cex.lab = 2.0, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add horizontal line
abline(h = 1, col="darkgray", lty = 2, lwd = 2)
# Add minimal points
points(jitter(rep(3, length(dnds.min$dnds)), amount = 0.2), dnds.min$dnds,
pch = 21, bg = "pink", col = "pink", lwd = 2, cex = 1.0)
# Add confidence intervals
arrows(x0 = c(1), y0 = mean.dnds.wt, y1 = mean.dnds.wt + sem.dnds.wt, angle = 90,
length = 0.1, lwd = 2, col = "blue")
arrows(x0 = c(1), y0 = mean.dnds.wt, y1 = mean.dnds.wt - sem.dnds.wt, angle = 90,
length=0.1, lwd = 2, col = "blue")
arrows(x0 = c(3), y0 = mean.dnds.min, y1 = mean.dnds.min + sem.dnds.min, angle = 90,
length = 0.1, lwd = 2, col = "red")
arrows(x0 = c(3), y0 = mean.dnds.min, y1 = mean.dnds.min - sem.dnds.min, angle = 90,
length=0.1, lwd = 2, col = "red")
# Add means
points(1, mean.dnds.wt, pch = 22, col = "blue",
bg = "blue", lwd = 2, cex = 2)
points(3, mean.dnds.min, pch = 22, col = "red",
bg = "red", lwd = 2, cex = 2)
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.0", "1.0", "2.0", "3.0"), at = c(0,1, 2, 3))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0, 1, 2, 3), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Non-minimal", "Minimal"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Strain'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.5)
mtext(expression(italic("dN/dS")), side = 2,
outer = TRUE, cex = 1.5, line = -3.0)
# Add P-values
#mtext(expression(~italic("P")~"= 0.488"), line = -2.0, cex = 1.0, at = 0.5)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~/GitHub/MinimalCell/figures/FigExt2.png")
grid.raster(img)
# Make figure
png(filename="~/GitHub/MinimalCell/figures/FigExt2.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# Add Non-minimal points
plot(jitter(rep(1, length(dnds.wt$dnds)), amount = 0.2), dnds.wt$dnds,
xlim = c(0, 4), ylim = c(0.0, 10.5), type = "p", pch = 21, bg = "lightblue",
col = "lightblue", cex = 1.0, ylab = "", xlab = "",
cex.lab = 2.0, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add horizontal line
abline(h = 1, col="darkgray", lty = 2, lwd = 2)
# Add minimal points
points(jitter(rep(3, length(dnds.min$dnds)), amount = 0.2), dnds.min$dnds,
pch = 21, bg = "pink", col = "pink", lwd = 2, cex = 1.0)
# Add confidence intervals
arrows(x0 = c(1), y0 = mean.dnds.wt, y1 = mean.dnds.wt + sem.dnds.wt, angle = 90,
length = 0.1, lwd = 2, col = "blue")
arrows(x0 = c(1), y0 = mean.dnds.wt, y1 = mean.dnds.wt - sem.dnds.wt, angle = 90,
length=0.1, lwd = 2, col = "blue")
arrows(x0 = c(3), y0 = mean.dnds.min, y1 = mean.dnds.min + sem.dnds.min, angle = 90,
length = 0.1, lwd = 2, col = "red")
arrows(x0 = c(3), y0 = mean.dnds.min, y1 = mean.dnds.min - sem.dnds.min, angle = 90,
length=0.1, lwd = 2, col = "red")
# Add means
points(1, mean.dnds.wt, pch = 22, col = "blue",
bg = "blue", lwd = 2, cex = 2)
points(3, mean.dnds.min, pch = 22, col = "red",
bg = "red", lwd = 2, cex = 2)
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.0", "1.0", "2.0", "3.0"), at = c(0,1, 2, 3))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0, 1, 2, 3), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Non-minimal", "Minimal"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Strain'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.5)
mtext(expression(italic("dN/dS")), side = 2,
outer = TRUE, cex = 1.5, line = -3.0)
# Add P-values
#mtext(expression(~italic("P")~"= 0.488"), line = -2.0, cex = 1.0, at = 0.5)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~/GitHub/MinimalCell/figures/FigExt2.png")
grid.raster(img)
dnds.wt
# Load data
dnds <- read.csv("~/GitHub/MinimalCell/datafiles/cases_Mm.300.csv")
colnames(dnds)[12] <- "dnds"
colnames(dnds)[2] <- "strain"
# Convert strain to factor
dnds$strain <- as.factor(dnds$strain)
dnds<-dnds[1:8,]
# Add x-values for plotting
x <- c(1,1,1,1,3,3,3,3)
dnds <- data.frame(dnds, x)
# Subset dN/dS by strain and summary statistics
dnds.wt  <- filter(dnds, strain == "Non-minimal") %>%
dplyr::select(strain, dnds, x)
dnds.min  <- filter(dnds, strain == "Minimal") %>%
dplyr::select(strain, dnds, x)
median.dnds.wt <-median(dnds.wt$dnds)
LL.95.dnds.wt <- LL.95(dnds.wt$dnds)
UL.95.dnds.wt <- UL.95(dnds.wt$dnds)
mean.dnds.wt<-mean(dnds.wt$dnds)
sem.dnds.wt<-sem(dnds.wt$dnds)
median.dnds.min <-median(dnds.min$dnds)
LL.95.dnds.min <- LL.95(dnds.min$dnds)
UL.95.dnds.min <- UL.95(dnds.min$dnds)
mean.dnds.min<-mean(dnds.min$dnds)
sem.dnds.min<-sem(dnds.min$dnds)
# Non-minimal data: essential vs. non-essential
dndds.nonmin <- read.csv("~/GitHub/MinimalCell/datafiles/non-minimal.DNDS_freqs.csv")
equal.var <- var.test(dnds.wt$dnds, dnds.min$dnds)
# Test for equal variance : P = 0.392 --> homogeneous variance
# Non-minimal vs. minimal
dnds.ttest <- t.test(dnds.wt$dnds, dnds.min$dnds, var.equal = TRUE, alternative = 'two.sided')
# Results: t = 0.81011, df = 6, p-value = 0.488 --> no difference
# Non-minimal: dN/dS different from 1?
dnds.nonmin.ttest <- t.test(dnds.wt$dnds, mu = 1, alternative ="two.sided")
# Results: t = -0.34, df = 3, p-value = 0.7446. Not different
# Minimal: dN/dS different from 1?
dnds.min.ttest <- t.test(dnds.min$dnds, mu = 1, alternative ="two.sided")
# Results: t = -0.92, df = 3, p-value = 0.4238. Not different from 1.
# what if we remove the potential outlier?
dnds.wt.noout <- dnds.wt %>%
filter(dnds < "2")
equal.var <- var.test(dnds.wt.noout$dnds, dnds.min$dnds)
# Test for equal variance : P = 0.132 --> homogeneous variance
# Non-minimal vs. minimal
dnds.ttest <- t.test(dnds.wt.noout$dnds, dnds.min$dnds,
var.equal = TRUE, alternative = 'two.sided')
# Results: t = -0.252, df = 5, p-value = 0.8114 --> no difference
# Non-minimal: dN/dS different from 1?
dnds.nonmin.ttest <- t.test(dnds.wt.noout$dnds, mu = 1, alternative ="two.sided")
# Results: t = -11.025, df = 2, p-value = 0.008. Significantly less than 1.
# Make figure
png(filename="~/GitHub/MinimalCell/figures/FigExt2.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# Add Non-minimal points
plot(jitter(rep(1, length(dnds.wt$dnds)), amount = 0.2), dnds.wt$dnds,
xlim = c(0, 4), ylim = c(0.0, 2.5), type = "p", pch = 21, bg = "lightblue",
col = "lightblue", cex = 1.0, ylab = "", xlab = "",
cex.lab = 2.0, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add horizontal line
abline(h = 1, col="darkgray", lty = 2, lwd = 2)
# Add minimal points
points(jitter(rep(3, length(dnds.min$dnds)), amount = 0.2), dnds.min$dnds,
pch = 21, bg = "pink", col = "pink", lwd = 2, cex = 1.0)
# Add confidence intervals
arrows(x0 = c(1), y0 = mean.dnds.wt, y1 = mean.dnds.wt + sem.dnds.wt, angle = 90,
length = 0.1, lwd = 2, col = "blue")
arrows(x0 = c(1), y0 = mean.dnds.wt, y1 = mean.dnds.wt - sem.dnds.wt, angle = 90,
length=0.1, lwd = 2, col = "blue")
arrows(x0 = c(3), y0 = mean.dnds.min, y1 = mean.dnds.min + sem.dnds.min, angle = 90,
length = 0.1, lwd = 2, col = "red")
arrows(x0 = c(3), y0 = mean.dnds.min, y1 = mean.dnds.min - sem.dnds.min, angle = 90,
length=0.1, lwd = 2, col = "red")
# Add means
points(1, mean.dnds.wt, pch = 22, col = "blue",
bg = "blue", lwd = 2, cex = 2)
points(3, mean.dnds.min, pch = 22, col = "red",
bg = "red", lwd = 2, cex = 2)
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.0", "1.0", "2.0", "3.0"), at = c(0,1, 2, 3))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0, 1, 2, 3), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Non-minimal", "Minimal"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Strain'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.5)
mtext(expression(italic("dN/dS")), side = 2,
outer = TRUE, cex = 1.5, line = -3.0)
# Add P-values
#mtext(expression(~italic("P")~"= 0.488"), line = -2.0, cex = 1.0, at = 0.5)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~/GitHub/MinimalCell/figures/FigExt2.png")
grid.raster(img)
rm(list=ls())
getwd()
setwd("~/GitHub/MinimalCell")
require("png")
require("dplyr")
require("grid")
sem <- function(x) sqrt(var(x)/length(x))
# Load data
rel.fit.raw <-read.csv("~/GitHub/MinimalCell/datafiles/Interaction_data_fitness_altered.gating.a.little.more.stringent.csv")
rel.fit.raw <- as_tibble(rel.fit.raw)
# Subset data
rel.fit <- rel.fit.raw %>% group_by(timepoint, strain) %>% summarise(mean = mean(W_1.0), sem = sem(W_1.0))
# Set data as factors and rename levels
rel.fit$strain <- as.factor(rel.fit$strain)
levels(rel.fit$strain)[levels(rel.fit$strain)=="JCVI-syn1.0"] <- "Non-minimal"
levels(rel.fit$strain)[levels(rel.fit$strain)=="JCVI-syn3B"] <- "Minimal"
rel.fit$strain <- factor(rel.fit$strain, levels=c("Non-minimal","Minimal"))
# Add x-values for plotting
time.x <- c(1,1,3,3)
rel.fit <- data.frame(rel.fit, time.x)
# Subset relative fitness by strain
rel.fit.wt  <- filter(rel.fit, strain == "Non-minimal") %>%
dplyr::select(timepoint, mean, sem, time.x)
rel.fit.min  <- filter(rel.fit, strain== "Minimal") %>%
dplyr::select(timepoint, mean, sem, time.x)
# Differences in relative fitness between ancestors (wt vs. min)?
# Answer = Yes: t = 11.27, df = 3.1776, p-value = 0.001145
# Minimization led to 52 % reduction in fitness
rel.fit.anc  <- filter(rel.fit.raw, timepoint == "Ancestor") %>%
dplyr::select(strain, W_1.0)
# Test for equal variance: P = p-value = 0.0462 --> non-homogenous variance
equal.var.anc <-var.test(rel.fit.anc$W_1.0[1:3], rel.fit.anc$W_1.0[4:7])
test.anc <- t.test(rel.fit.anc$W_1.0 ~ rel.fit.anc$strain, var.equal = F)
# Differences in relative fitness between evolved (wt vs. min)?
# Answer = Yes: t = 11.471, df = 3.19, p-value = 0.001068
# After evolution, minimization has 48 % reduction in fitness
rel.fit.evo  <- filter(rel.fit.raw, timepoint == "Evolved") %>%
dplyr::select(strain, W_1.0)
# Test for equal variance: P = 0.09 --> homogeneous variance
equal.var.evo <-var.test(rel.fit.evo$W_1.0[1:4], rel.fit.evo$W_1.0[5:8])
test.evo <- t.test(rel.fit.evo$W_1.0 ~ rel.fit.evo$strain, var.equal = T)
# Difference in fitness between minimal and wt after evolution?
# Answer = Yes: t = 5.501, df = 6, p-value = 0.001068
test.minvswtanc <- t.test(x=rel.fit.evo$W_1.0[5:8], mu = 1, alternative = 't')
test.minvswtanc
#Difference in fitness between evolved minimal cel popns and non-min anc fitness?
#No. p = .92
wt.w  <- filter(rel.fit.evo, strain == "JCVI-syn1.0") %>%
dplyr::select(W_1.0)
wt.delt.w <- wt.w - rel.fit.wt[1,2]
min.w  <- filter(rel.fit.evo, strain == "JCVI-syn3B") %>%
dplyr::select(W_1.0)
min.delt.w <- min.w - rel.fit.min[1,2]
delta.w <- data.frame(wt.delt.w, min.delt.w)
colnames(delta.w) <-c("Non-minimal", "Minimal")
# Test for equal variance: P = 0.24 --> homogeneous variance
equal.var.delta <- var.test(delta.w$"Non-minimal", delta.w$Minimal)
test.delta <- t.test(delta.w$"Non-minimal", delta.w$Minimal, var.equal = T)
#Does the magnitude of fitness-increase differ between the minimal and the non-minimal populations?
#No, but it's close, t= 2.16, df=6, p=0.07441
var.test(rel.fit.anc$W_1.0[1:3], rel.fit.anc$W_1.0[4:7])
t.test(rel.fit.anc$W_1.0 ~ rel.fit.anc$strain, var.equal = F)
var.test(rel.fit.evo$W_1.0[1:4], rel.fit.evo$W_1.0[5:8])
t.test(rel.fit.evo$W_1.0 ~ rel.fit.evo$strain, var.equal = T)
t.test(x=rel.fit.evo$W_1.0[5:8], mu = 1, alternative = 't')
var.test(delta.w$"Non-minimal", delta.w$Minimal)
t.test(delta.w$"Non-minimal", delta.w$Minimal, var.equal = T)
png(filename="~/GitHub/MinimalCell/figures/Fig2_altered.gating.a.little.more.stringent.png",
width = 1200, height = 1200, res = 96*2)
par(mar = c(7, 7, 5, 7))
# initiate plot with points for syn3B ancestor (minimal)
plot(jitter(rep(1, length(rel.fit.anc$W_1.0[1:3])), amount = 0.5),
rel.fit.anc$W_1.0[1:3], ylim = c(0.25, 1.65), xlim = c(0, 4.55),
pch = 21, bg = "pink", col = "pink", lwd = 2, cex = 1.3, yaxt = "n",
xaxt = "n", cex.lab = 1.5, las = 1,  ylab = "", xlab = "")
box(lwd=2)
# add points for for syn 1.0 ancestor (non-minimal)
points(jitter(rep(1, length(rel.fit.anc$W_1.0[4:7])), amount = 0.5),
rel.fit.anc$W_1.0[4:7], pch = 21, bg = "lightblue", col = "lightblue",
lwd = 2, cex = 1.3)
# add points for syn 3B evolved (minimal)
points(jitter(rep(3, length(rel.fit.evo$W_1.0[5:8])), amount = 0.4),
rel.fit.evo$W_1.0[5:8], pch = 21, bg = "pink", col = "pink",
lwd = 2, cex = 1.3)
# add points for syn1.0 evolved (non-minimal)
points(jitter(rep(3, length(rel.fit.evo$W_1.0[1:4])), amount = 0.4),
rel.fit.evo$W_1.0[1:4], pch = 21, bg = "lightblue", col = "lightblue",
lwd = 2, cex = 1.3)
# Add error bars
arrows(x0 = rel.fit.wt$time.x, y0 = rel.fit.wt$mean,
y1 = rel.fit.wt$mean + rel.fit.wt$sem,
angle = 90, length = 0.1, lwd = 2, col = "blue")
arrows(x0 = rel.fit.wt$time.x, y0 = rel.fit.wt$mean,
y1 = rel.fit.wt$mean - rel.fit.wt$sem,
angle = 90, length=0.1, lwd = 2, col = "blue")
arrows(x0 = rel.fit.min$time.x, y0 = rel.fit.min$mean,
y1 = rel.fit.min$mean + rel.fit.min$sem,
angle = 90, length = 0.1, lwd = 2, col = "red")
arrows(x0 = rel.fit.min$time.x, y0 = rel.fit.min$mean,
y1 = rel.fit.min$mean - rel.fit.min$sem,
angle = 90, length=0.1, lwd = 2, col = "red")
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.5", "1.0", "1.5"), at = c(0.5, 1, 1.5))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0.5, 1, 1.5), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Ancestor", "Evolved"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Time'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.45)
mtext(expression("Relative fitness ("~italic("W")~")"), side = 2,
outer = TRUE, cex = 1.5, line = -4, adj = 0.55)
# Add line segments
segments(rel.fit.wt$time.x[1], rel.fit.wt$mean[1], rel.fit.wt$time.x[2],
rel.fit.wt$mean[2], col = "blue", lwd = 2)
segments(rel.fit.min$time.x[1], rel.fit.min$mean[1], rel.fit.min$time.x[2],
rel.fit.min$mean[2], col = "red", lwd = 2)
# Add non-minimal points
points(rel.fit.min$time.x, rel.fit.wt$mean, pch = 22,
bg = "blue", col = "blue", lwd = 2, cex = 2)
# Add minimal points
points(rel.fit.min$time.x, rel.fit.min$mean, pch = 22,
bg = "red", col = "red", lwd = 2, cex = 2)
# Add P-values
#mtext(expression("Timepoint:" ~italic("P")~"= 0.0003"), line = -2.5, cex = 0.80, at = 0.9)
#mtext(expression("Strain:" ~italic("P")~"< 0.0001"), line = -4.0, cex = 0.80, at = 0.75)
# Add strain identifier
text(3.9, rel.fit.wt$mean[2], labels = "Non-minimal", cex = 1.0)
text(3.9, rel.fit.min$mean[2], labels = "Minimal", cex = 1.0)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~/GitHub/MinimalCell/figures/Fig2_altered.gating.a.little.more.stringent.png")
grid.raster(img)
