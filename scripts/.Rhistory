dplyr::select(strain, dnds, x)
median.dnds.wt <-median(dnds.wt$dnds)
LL.95.dnds.wt <- LL.95(dnds.wt$dnds)
UL.95.dnds.wt <- UL.95(dnds.wt$dnds)
mean.dnds.wt<-mean(dnds.wt$dnds)
sem.dnds.wt<-sem(dnds.wt$dnds)
median.dnds.min <-median(dnds.min$dnds)
LL.95.dnds.min <- LL.95(dnds.min$dnds)
UL.95.dnds.min <- UL.95(dnds.min$dnds)
mean.dnds.min<-mean(dnds.min$dnds)
sem.dnds.min<-sem(dnds.min$dnds)
# Non-minimal data: essential vs. non-essential
dndds.nonmin <- read.csv("~/GitHub/MinimalCell/datafiles/non-minimal.DNDS_freqs.csv")
equal.var <- var.test(dnds.wt$dnds, dnds.min$dnds)
# Test for equal variance : P = 0.170 --> homogeneous variance
dnds.ttest <- t.test(dnds.wt$dnds, dnds.min$dnds, var.equal = TRUE, alternative = 'two.sided')
# Results: t = 0.81011, df = 6, p-value = 0.488 --> no difference
# Non-minimal: essential vs. non-essential
dnds.nomin.ttest <- t.test(x = dndds.nonmin$dNdS_gdtools[1:4], y = dndds.nonmin$dNdS_gdtools[5:8],
mu = 0, alternative ="two.sided", paired = TRUE)
# Results: t = -0.91262, df = 3, p-value = 0.4287 --> no difference
# Non-minimal: non-essential dN/dS different from 1?
dnds.nomin.nonessential.ttest <- t.test(dndds.nonmin$dNdS_gdtools[1:4], mu = 1, alternative ="two.sided")
# Results: t = -4.5473, df = 3, p-value = 0.01992. Yes, different from neutral
# Non-minimal: essential dN/dS different from 1?
dnds.nomin.essential.ttest <- t.test(dndds.nonmin$dNdS_gdtools[5:8], mu = 1, alternative ="two.sided")
# Results: t = -2.0872, df = 3, p-value = 0.1281. Not different from neutral
View(dndds.nonmin)
nonessdf<-filter(dndds.nonmin,Genomepartition=="nonessential")
View(nonessdf)
essdf<-filter(dndds.nonmin,Genomepartition=="essential")
colnames(nonessdf)[4] <- "dnds"
View(nonessdf)
colnames(essdf)[4] <- "dnds"
# Make figure
nonessdf<-filter(dndds.nonmin,Genomepartition=="nonessential")
colnames(nonessdf)[4] <- "dnds"
essdf<-filter(dndds.nonmin,Genomepartition=="essential")
colnames(essdf)[4] <- "dnds"
median.dnds.noness <-median(nonessdf$dnds)
LL.95.dnds.noness <- LL.95(nonessdf$dnds)
UL.95.dnds.noness <- UL.95(nonessdf$dnds)
mean.dnds.noness<-mean(nonessdf$dnds)
sem.dnds.noness<-sem(nonessdf$dnds)
median.dnds.ess <-median(essdf$dnds)
LL.95.dnds.ess <- LL.95(essdf$dnds)
UL.95.dnds.ess <- UL.95(essdf$dnds)
mean.dnds.ess<-mean(essdf$dnds)
sem.dnds.ess<-sem(essdf$dnds)
png(filename="~/GitHub/MinimalCell/figures/FigS7.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# Add nonessential points
plot(jitter(rep(1, length(nonessdf$dnds)), amount = 0.2), nonessdf$dnds,
xlim = c(0, 4), ylim = c(0.0, 3.5), type = "p", pch = 21, bg = "lightblue",
col = "lightblue", cex = 1.0, ylab = "", xlab = "",
cex.lab = 2.0, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add horizontal line
abline(h = 1, col="darkgray", lty = 2, lwd = 2)
# Add essential points
points(jitter(rep(3, length(essdf$dnds)), amount = 0.2), essdf$dnds,
pch = 21, bg = "pink", col = "pink", lwd = 2, cex = 1.0)
# Add confidence intervals
arrows(x0 = c(1), y0 = mean.dnds.noness, y1 = mean.dnds.noness + sem.dnds.noness, angle = 90,
length = 0.1, lwd = 2, col = "blue")
arrows(x0 = c(1), y0 = mean.dnds.noness, y1 = mean.dnds.noness - sem.dnds.noness, angle = 90,
length=0.1, lwd = 2, col = "blue")
arrows(x0 = c(3), y0 = mean.dnds.ess, y1 = mean.dnds.ess + sem.dnds.ess, angle = 90,
length = 0.1, lwd = 2, col = "red")
arrows(x0 = c(3), y0 = mean.dnds.ess, y1 = mean.dnds.ess - sem.dnds.ess, angle = 90,
length=0.1, lwd = 2, col = "red")
# Add means
points(1, mean.dnds.noness, pch = 22, col = "blue",
bg = "blue", lwd = 2, cex = 2)
points(3, mean.dnds.ess, pch = 22, col = "red",
bg = "red", lwd = 2, cex = 2)
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.0", "1.0", "2.0", "3.0"), at = c(0,1, 2, 3))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0, 1, 2, 3), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Nonessential", "Essential"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Partition'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.5)
mtext(expression(italic("dN/dS")), side = 2,
outer = TRUE, cex = 1.5, line = -3.0)
# Add P-values
mtext(expression(~italic("P")~"= 0.429"), line = -2.0, cex = 1.0, at = 0.5)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~/GitHub/MinimalCell/figures/FigS7.png")
grid.raster(img)
# Make figure
nonessdf<-filter(dndds.nonmin,Genomepartition=="nonessential")
colnames(nonessdf)[4] <- "dnds"
essdf<-filter(dndds.nonmin,Genomepartition=="essential")
colnames(essdf)[4] <- "dnds"
median.dnds.noness <-median(nonessdf$dnds)
LL.95.dnds.noness <- LL.95(nonessdf$dnds)
UL.95.dnds.noness <- UL.95(nonessdf$dnds)
mean.dnds.noness<-mean(nonessdf$dnds)
sem.dnds.noness<-sem(nonessdf$dnds)
median.dnds.ess <-median(essdf$dnds)
LL.95.dnds.ess <- LL.95(essdf$dnds)
UL.95.dnds.ess <- UL.95(essdf$dnds)
mean.dnds.ess<-mean(essdf$dnds)
sem.dnds.ess<-sem(essdf$dnds)
png(filename="~/GitHub/MinimalCell/figures/FigS7.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# Add nonessential points
plot(jitter(rep(1, length(nonessdf$dnds)), amount = 0.2), nonessdf$dnds,
xlim = c(0, 4), ylim = c(0.0, 2.5), type = "p", pch = 21, bg = "lightblue",
col = "lightblue", cex = 1.0, ylab = "", xlab = "",
cex.lab = 2.0, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add horizontal line
abline(h = 1, col="darkgray", lty = 2, lwd = 2)
# Add essential points
points(jitter(rep(3, length(essdf$dnds)), amount = 0.2), essdf$dnds,
pch = 21, bg = "pink", col = "pink", lwd = 2, cex = 1.0)
# Add confidence intervals
arrows(x0 = c(1), y0 = mean.dnds.noness, y1 = mean.dnds.noness + sem.dnds.noness, angle = 90,
length = 0.1, lwd = 2, col = "blue")
arrows(x0 = c(1), y0 = mean.dnds.noness, y1 = mean.dnds.noness - sem.dnds.noness, angle = 90,
length=0.1, lwd = 2, col = "blue")
arrows(x0 = c(3), y0 = mean.dnds.ess, y1 = mean.dnds.ess + sem.dnds.ess, angle = 90,
length = 0.1, lwd = 2, col = "red")
arrows(x0 = c(3), y0 = mean.dnds.ess, y1 = mean.dnds.ess - sem.dnds.ess, angle = 90,
length=0.1, lwd = 2, col = "red")
# Add means
points(1, mean.dnds.noness, pch = 22, col = "blue",
bg = "blue", lwd = 2, cex = 2)
points(3, mean.dnds.ess, pch = 22, col = "red",
bg = "red", lwd = 2, cex = 2)
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.0", "1.0", "2.0"), at = c(0,1, 2))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0, 1, 2, 3), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Nonessential", "Essential"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Partition'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.5)
mtext(expression(italic("dN/dS")), side = 2,
outer = TRUE, cex = 1.5, line = -3.0)
# Add P-values
mtext(expression(~italic("P")~"= 0.429"), line = -2.0, cex = 1.0, at = 0.5)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~/GitHub/MinimalCell/figures/FigS7.png")
grid.raster(img)
rm(list=ls())
getwd()
setwd("~/GitHub/MinimalCell")
require("png")
require("dplyr")
require("grid")
sem <- function(x) sqrt(var(x)/length(x))
# Load data
rel.fit.raw <-read.csv("~/GitHub/MinimalCell/datafiles/ftsZ_W_cases.csv")
rel.fit.raw <- as_tibble(rel.fit.raw)
# Load data
rel.fit.raw <-read.csv("~/GitHub/MinimalCell/datafiles/ftsZ_W_cases.csv")
rel.fit.raw <- as.tibble(rel.fit.raw)
library(dplyr)
install.packages("vctrs")
library(dplyr)
rel.fit.raw <-read.csv("~/GitHub/MinimalCell/datafiles/ftsZ_W_cases.csv")
rel.fit.raw <- as_tibble(rel.fit.raw)
# Subset data
rel.fit <- rel.fit.raw %>% group_by(strain, Mutation) %>% summarise(mean = mean(W_1.0), sem = sem(W_1.0))
# Set data as factors and rename levels
rel.fit$strain <- as.factor(rel.fit$strain)
levels(rel.fit$strain)[levels(rel.fit$strain)=="JCVI-syn1.0"] <- "Non-minimal"
levels(rel.fit$strain)[levels(rel.fit$strain)=="JCVI-syn3B"] <- "Minimal"
rel.fit$strain <- factor(rel.fit$strain, levels=c("Non-minimal","Minimal"))
# Add x-values for plotting
time.x <- c(3,1,3,1)
rel.fit <- data.frame(rel.fit, time.x)
# Subset relative fitness by strain
rel.fit.wt  <- filter(rel.fit, strain == "Non-minimal") %>%
dplyr::select(Mutation, mean, sem, time.x)
rel.fit.min  <- filter(rel.fit, strain== "Minimal") %>%
dplyr::select(Mutation, mean, sem, time.x)
rel.fit.anc  <- filter(rel.fit.raw, timepoint == "Ancestor") %>%
dplyr::select(strain, W_1.0)
var.test(c(filter(rel.fit.raw, strain == "JCVI-syn1.0", Mutation=="None")$W_1.0),
c(filter(rel.fit.raw, strain == "JCVI-syn3B",Mutation=="None")$W_1.0))
# Test for equal variance: P = p-value = 0.9201 -> homogeneous variance
t.test(c(filter(rel.fit.raw, strain == "JCVI-syn1.0", Mutation=="None")$W_1.0),
c(filter(rel.fit.raw, strain == "JCVI-syn3B",Mutation=="None")$W_1.0),
paired = F,alternative = "two.sided", mu = 0, var.equal = T)
# Results: t = 18.302, df = 15, p-value = 1.137e-11
# Minimization led to 65% or 2.9-fold reduction in fitness
# Evolved lines
# 1. Differences in fitness of ftsZ mutation on minimal vs. non-minimal background
var.test(c(filter(rel.fit.raw, strain == "JCVI-syn1.0", Mutation=="ftsZ")$W_1.0),
c(filter(rel.fit.raw, strain == "JCVI-syn3B",Mutation=="ftsZ")$W_1.0))
# Test for equal variance: P = 0.0002632 -> heterogeneous variance
t.test(c(filter(rel.fit.raw, strain == "JCVI-syn1.0", Mutation=="ftsZ")$W_1.0),
c(filter(rel.fit.raw, strain == "JCVI-syn3B",Mutation=="ftsZ")$W_1.0),
paired = F,alternative = "two.sided", mu = 0, var.equal = F)
# Results: t = 11.287, df = 6.4972, p-value = 1.654e-05
# Minimization led to 65% or 2.9-fold reduction in fitness
# ftsZ mutant on non-min is 200% or 3.13-fold larger than ftsZ mutant on min
# 2. Is ftsZ mutation adaptive in non-minimal background?
var.test(c(filter(rel.fit.raw, strain == "JCVI-syn1.0", Mutation == "ftsZ")$W_1.0),
c(filter(rel.fit.raw, strain == "JCVI-syn1.0",Mutation == "None")$W_1.0))
# Test for equal variance: P = 0.05582 -> homogenous variance
t.test(c(filter(rel.fit.raw, strain == "JCVI-syn1.0", Mutation == "ftsZ")$W_1.0),
c(filter(rel.fit.raw, strain == "JCVI-syn1.0",Mutation == "None")$W_1.0),
paired = F,alternative = "greater", mu = 0, var.equal = T)
# Results: t = 2.6873, df = 10, p-value = 0.0114
# ftsZ mutation increased non-minimal fitness by 25% or 1.24-fold
# 3. Is ftsZ mutation adaptive in minimal background?
var.test(c(filter(rel.fit.raw, strain == "JCVI-syn3B", Mutation == "ftsZ")$W_1.0),
c(filter(rel.fit.raw, strain == "JCVI-syn3B",Mutation == "None")$W_1.0))
# Test for equal variance: P = 0.3996 -> heterogeneous variance
t.test(c(filter(rel.fit.raw, strain == "JCVI-syn3B", Mutation == "ftsZ")$W_1.0),
c(filter(rel.fit.raw, strain == "JCVI-syn3B", Mutation == "None")$W_1.0),
paired = F,alternative = "greater", mu = 0, var.equal = T)
png(filename="~/GitHub/MinimalCell/figures/FigExt3.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# initiate plot with points for syn3B ancestor (minimal)
plot(jitter(rep(1, length(filter(rel.fit.raw,strain=="JCVI-syn3B" & Mutation=="None")$W_1.0)), amount = 0.5),
filter(rel.fit.raw,strain=="JCVI-syn3B" & Mutation=="None")$W_1.0, ylim = c(0.1, 1.75), xlim = c(0, 4.55),
pch = 21, bg = "pink", col = "pink", lwd = 2, cex = 1.3, yaxt = "n",
xaxt = "n", cex.lab = 1.5, las = 1,  ylab = "", xlab = "")
box(lwd=2)
# add points for for syn 1.0 ancestor (non-minimal)
points(jitter(rep(1, length(filter(rel.fit.raw,strain=="JCVI-syn1.0" & Mutation=="None")$W_1.0)), amount = 0.5),
filter(rel.fit.raw,strain=="JCVI-syn1.0" & Mutation=="None")$W_1.0, pch = 21, bg = "lightblue", col = "lightblue",
lwd = 2, cex = 1.3)
# add points for for syn 3B ftsZ (minimal)
points(jitter(rep(3, length(filter(rel.fit.raw,strain=="JCVI-syn3B" & Mutation=="ftsZ")$W_1.0)), amount = 0.5),
filter(rel.fit.raw,strain=="JCVI-syn3B" & Mutation=="ftsZ")$W_1.0, pch = 21, bg = "pink", col = "pink",
lwd = 2, cex = 1.3)
# add points for for syn 3B ftsZ (non-minimal)
points(jitter(rep(3, length(filter(rel.fit.raw,strain=="JCVI-syn1.0" & Mutation=="ftsZ")$W_1.0)), amount = 0.5),
filter(rel.fit.raw,strain=="JCVI-syn1.0" & Mutation=="ftsZ")$W_1.0, pch = 21, bg = "lightblue", col = "lightblue",
lwd = 2, cex = 1.3)
# Add non-minimal means
points(rel.fit.min$time.x, rel.fit.wt$mean, pch = 21,
bg = "blue", col = "blue", lwd = 2, cex = 2)
# Add minimal means
points(rel.fit.min$time.x, rel.fit.min$mean, pch = 21,
bg = "red", col = "red", lwd = 2, cex = 2)
# Add error bars
arrows(x0 = rel.fit.wt$time.x, y0 = rel.fit.wt$mean,
y1 = rel.fit.wt$mean + rel.fit.wt$sem,
angle = 90, length = 0.1, lwd = 2, col = "blue")
arrows(x0 = rel.fit.wt$time.x, y0 = rel.fit.wt$mean,
y1 = rel.fit.wt$mean - rel.fit.wt$sem,
angle = 90, length=0.1, lwd = 2, col = "blue")
arrows(x0 = rel.fit.min$time.x, y0 = rel.fit.min$mean,
y1 = rel.fit.min$mean + rel.fit.min$sem,
angle = 90, length = 0.1, lwd = 2, col = "red")
arrows(x0 = rel.fit.min$time.x, y0 = rel.fit.min$mean,
y1 = rel.fit.min$mean - rel.fit.min$sem,
angle = 90, length=0.1, lwd = 2, col = "red")
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.5", "1.0", "1.5"), at = c(0.5, 1, 1.5))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0.5, 1, 1.5), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Ancestor", "ftsZ E315*"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Strain'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.45)
mtext(expression("Relative fitness ("~italic("W")~")"), side = 2,
outer = TRUE, cex = 1.5, line = -4, adj = 0.55)
# Add line segments
segments(rel.fit.wt$time.x[1], rel.fit.wt$mean[1], rel.fit.wt$time.x[2],
rel.fit.wt$mean[2], col = "blue", lwd = 2)
segments(rel.fit.min$time.x[1], rel.fit.min$mean[1], rel.fit.min$time.x[2],
rel.fit.min$mean[2], col = "red", lwd = 2)
# Add P-values
#mtext(expression("Timepoint:" ~italic("P")~"= 0.0003"), line = -2.5, cex = 0.80, at = 0.9)
#mtext(expression("Strain:" ~italic("P")~"< 0.0001"), line = -4.0, cex = 0.80, at = 0.75)
# Add strain identifier
text(3.9, rel.fit.wt$mean[1], labels = "Non-minimal", cex = 1.0)
text(3.8, rel.fit.min$mean[1], labels = "Minimal", cex = 1.0)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~/GitHub/MinimalCell/figures/FigExt3.png")
grid.raster(img)
rm(list=ls())
getwd()
setwd("~/GitHub/MinimalCell")
require("png")
require("dplyr")
require("grid")
sem <- function(x) sqrt(var(x)/length(x))
rel.fit.raw <-read.csv("~/GitHub/MinimalCell/datafiles/ftsZ_W_cases_small.change.csv")
rel.fit.raw <- as_tibble(rel.fit.raw)
# Subset data
rel.fit <- rel.fit.raw %>% group_by(strain, Mutation) %>% summarise(mean = mean(W_1.0), sem = sem(W_1.0))
# Set data as factors and rename levels
rel.fit$strain <- as.factor(rel.fit$strain)
levels(rel.fit$strain)[levels(rel.fit$strain)=="JCVI-syn1.0"] <- "Non-minimal"
levels(rel.fit$strain)[levels(rel.fit$strain)=="JCVI-syn3B"] <- "Minimal"
rel.fit$strain <- factor(rel.fit$strain, levels=c("Non-minimal","Minimal"))
# Add x-values for plotting
time.x <- c(3,1,3,1)
rel.fit <- data.frame(rel.fit, time.x)
# Subset relative fitness by strain
rel.fit.wt  <- filter(rel.fit, strain == "Non-minimal") %>%
dplyr::select(Mutation, mean, sem, time.x)
rel.fit.min  <- filter(rel.fit, strain== "Minimal") %>%
dplyr::select(Mutation, mean, sem, time.x)
rel.fit.anc  <- filter(rel.fit.raw, timepoint == "Ancestor") %>%
dplyr::select(strain, W_1.0)
var.test(c(filter(rel.fit.raw, strain == "JCVI-syn1.0", Mutation=="None")$W_1.0),
c(filter(rel.fit.raw, strain == "JCVI-syn3B",Mutation=="None")$W_1.0))
# Test for equal variance: P = p-value = 0.9201 -> homogeneous variance
t.test(c(filter(rel.fit.raw, strain == "JCVI-syn1.0", Mutation=="None")$W_1.0),
c(filter(rel.fit.raw, strain == "JCVI-syn3B",Mutation=="None")$W_1.0),
paired = F,alternative = "two.sided", mu = 0, var.equal = T)
# Results: t = 18.302, df = 15, p-value = 1.137e-11
# Minimization led to 65% or 2.9-fold reduction in fitness
# Evolved lines
# 1. Differences in fitness of ftsZ mutation on minimal vs. non-minimal background
var.test(c(filter(rel.fit.raw, strain == "JCVI-syn1.0", Mutation=="ftsZ")$W_1.0),
c(filter(rel.fit.raw, strain == "JCVI-syn3B",Mutation=="ftsZ")$W_1.0))
# Test for equal variance: P = 0.0002632 -> heterogeneous variance
t.test(c(filter(rel.fit.raw, strain == "JCVI-syn1.0", Mutation=="ftsZ")$W_1.0),
c(filter(rel.fit.raw, strain == "JCVI-syn3B",Mutation=="ftsZ")$W_1.0),
paired = F,alternative = "two.sided", mu = 0, var.equal = F)
# Results: t = 11.287, df = 6.4972, p-value = 1.654e-05
# Minimization led to 65% or 2.9-fold reduction in fitness
# ftsZ mutant on non-min is 200% or 3.13-fold larger than ftsZ mutant on min
# 2. Is ftsZ mutation adaptive in non-minimal background?
var.test(c(filter(rel.fit.raw, strain == "JCVI-syn1.0", Mutation == "ftsZ")$W_1.0),
c(filter(rel.fit.raw, strain == "JCVI-syn1.0",Mutation == "None")$W_1.0))
# Test for equal variance: P = 0.05582 -> homogenous variance
t.test(c(filter(rel.fit.raw, strain == "JCVI-syn1.0", Mutation == "ftsZ")$W_1.0),
c(filter(rel.fit.raw, strain == "JCVI-syn1.0",Mutation == "None")$W_1.0),
paired = F,alternative = "greater", mu = 0, var.equal = T)
# Results: t = 2.6873, df = 10, p-value = 0.0114
# ftsZ mutation increased non-minimal fitness by 25% or 1.24-fold
# 3. Is ftsZ mutation adaptive in minimal background?
var.test(c(filter(rel.fit.raw, strain == "JCVI-syn3B", Mutation == "ftsZ")$W_1.0),
c(filter(rel.fit.raw, strain == "JCVI-syn3B",Mutation == "None")$W_1.0))
# Test for equal variance: P = 0.3996 -> heterogeneous variance
t.test(c(filter(rel.fit.raw, strain == "JCVI-syn3B", Mutation == "ftsZ")$W_1.0),
c(filter(rel.fit.raw, strain == "JCVI-syn3B", Mutation == "None")$W_1.0),
paired = F,alternative = "greater", mu = 0, var.equal = T)
png(filename="~/GitHub/MinimalCell/figures/FigExt3_small.change.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# initiate plot with points for syn3B ancestor (minimal)
plot(jitter(rep(1, length(filter(rel.fit.raw,strain=="JCVI-syn3B" & Mutation=="None")$W_1.0)), amount = 0.5),
filter(rel.fit.raw,strain=="JCVI-syn3B" & Mutation=="None")$W_1.0, ylim = c(0.1, 1.75), xlim = c(0, 4.55),
pch = 21, bg = "pink", col = "pink", lwd = 2, cex = 1.3, yaxt = "n",
xaxt = "n", cex.lab = 1.5, las = 1,  ylab = "", xlab = "")
box(lwd=2)
# add points for for syn 1.0 ancestor (non-minimal)
points(jitter(rep(1, length(filter(rel.fit.raw,strain=="JCVI-syn1.0" & Mutation=="None")$W_1.0)), amount = 0.5),
filter(rel.fit.raw,strain=="JCVI-syn1.0" & Mutation=="None")$W_1.0, pch = 21, bg = "lightblue", col = "lightblue",
lwd = 2, cex = 1.3)
# add points for for syn 3B ftsZ (minimal)
points(jitter(rep(3, length(filter(rel.fit.raw,strain=="JCVI-syn3B" & Mutation=="ftsZ")$W_1.0)), amount = 0.5),
filter(rel.fit.raw,strain=="JCVI-syn3B" & Mutation=="ftsZ")$W_1.0, pch = 21, bg = "pink", col = "pink",
lwd = 2, cex = 1.3)
# add points for for syn 3B ftsZ (non-minimal)
points(jitter(rep(3, length(filter(rel.fit.raw,strain=="JCVI-syn1.0" & Mutation=="ftsZ")$W_1.0)), amount = 0.5),
filter(rel.fit.raw,strain=="JCVI-syn1.0" & Mutation=="ftsZ")$W_1.0, pch = 21, bg = "lightblue", col = "lightblue",
lwd = 2, cex = 1.3)
# Add non-minimal means
points(rel.fit.min$time.x, rel.fit.wt$mean, pch = 21,
bg = "blue", col = "blue", lwd = 2, cex = 2)
# Add minimal means
points(rel.fit.min$time.x, rel.fit.min$mean, pch = 21,
bg = "red", col = "red", lwd = 2, cex = 2)
# Add error bars
arrows(x0 = rel.fit.wt$time.x, y0 = rel.fit.wt$mean,
y1 = rel.fit.wt$mean + rel.fit.wt$sem,
angle = 90, length = 0.1, lwd = 2, col = "blue")
arrows(x0 = rel.fit.wt$time.x, y0 = rel.fit.wt$mean,
y1 = rel.fit.wt$mean - rel.fit.wt$sem,
angle = 90, length=0.1, lwd = 2, col = "blue")
arrows(x0 = rel.fit.min$time.x, y0 = rel.fit.min$mean,
y1 = rel.fit.min$mean + rel.fit.min$sem,
angle = 90, length = 0.1, lwd = 2, col = "red")
arrows(x0 = rel.fit.min$time.x, y0 = rel.fit.min$mean,
y1 = rel.fit.min$mean - rel.fit.min$sem,
angle = 90, length=0.1, lwd = 2, col = "red")
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.5", "1.0", "1.5"), at = c(0.5, 1, 1.5))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0.5, 1, 1.5), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Ancestor", "ftsZ E315*"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Strain'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.45)
mtext(expression("Relative fitness ("~italic("W")~")"), side = 2,
outer = TRUE, cex = 1.5, line = -4, adj = 0.55)
# Add line segments
segments(rel.fit.wt$time.x[1], rel.fit.wt$mean[1], rel.fit.wt$time.x[2],
rel.fit.wt$mean[2], col = "blue", lwd = 2)
segments(rel.fit.min$time.x[1], rel.fit.min$mean[1], rel.fit.min$time.x[2],
rel.fit.min$mean[2], col = "red", lwd = 2)
# Add P-values
#mtext(expression("Timepoint:" ~italic("P")~"= 0.0003"), line = -2.5, cex = 0.80, at = 0.9)
#mtext(expression("Strain:" ~italic("P")~"< 0.0001"), line = -4.0, cex = 0.80, at = 0.75)
# Add strain identifier
text(3.9, rel.fit.wt$mean[1], labels = "Non-minimal", cex = 1.0)
text(3.8, rel.fit.min$mean[1], labels = "Minimal", cex = 1.0)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~/GitHub/MinimalCell/figures/FigExt3_small.change.png")
png(filename="~/GitHub/MinimalCell/figures/FigExt3_small.change.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# initiate plot with points for syn3B ancestor (minimal)
plot(jitter(rep(1, length(filter(rel.fit.raw,strain=="JCVI-syn3B" & Mutation=="None")$W_1.0)), amount = 0.5),
filter(rel.fit.raw,strain=="JCVI-syn3B" & Mutation=="None")$W_1.0, ylim = c(0.1, 3.75), xlim = c(0, 4.55),
pch = 21, bg = "pink", col = "pink", lwd = 2, cex = 1.3, yaxt = "n",
xaxt = "n", cex.lab = 1.5, las = 1,  ylab = "", xlab = "")
box(lwd=2)
# add points for for syn 1.0 ancestor (non-minimal)
points(jitter(rep(1, length(filter(rel.fit.raw,strain=="JCVI-syn1.0" & Mutation=="None")$W_1.0)), amount = 0.5),
filter(rel.fit.raw,strain=="JCVI-syn1.0" & Mutation=="None")$W_1.0, pch = 21, bg = "lightblue", col = "lightblue",
lwd = 2, cex = 1.3)
# add points for for syn 3B ftsZ (minimal)
points(jitter(rep(3, length(filter(rel.fit.raw,strain=="JCVI-syn3B" & Mutation=="ftsZ")$W_1.0)), amount = 0.5),
filter(rel.fit.raw,strain=="JCVI-syn3B" & Mutation=="ftsZ")$W_1.0, pch = 21, bg = "pink", col = "pink",
lwd = 2, cex = 1.3)
# add points for for syn 3B ftsZ (non-minimal)
points(jitter(rep(3, length(filter(rel.fit.raw,strain=="JCVI-syn1.0" & Mutation=="ftsZ")$W_1.0)), amount = 0.5),
filter(rel.fit.raw,strain=="JCVI-syn1.0" & Mutation=="ftsZ")$W_1.0, pch = 21, bg = "lightblue", col = "lightblue",
lwd = 2, cex = 1.3)
# Add non-minimal means
points(rel.fit.min$time.x, rel.fit.wt$mean, pch = 21,
bg = "blue", col = "blue", lwd = 2, cex = 2)
# Add minimal means
points(rel.fit.min$time.x, rel.fit.min$mean, pch = 21,
bg = "red", col = "red", lwd = 2, cex = 2)
# Add error bars
arrows(x0 = rel.fit.wt$time.x, y0 = rel.fit.wt$mean,
y1 = rel.fit.wt$mean + rel.fit.wt$sem,
angle = 90, length = 0.1, lwd = 2, col = "blue")
arrows(x0 = rel.fit.wt$time.x, y0 = rel.fit.wt$mean,
y1 = rel.fit.wt$mean - rel.fit.wt$sem,
angle = 90, length=0.1, lwd = 2, col = "blue")
arrows(x0 = rel.fit.min$time.x, y0 = rel.fit.min$mean,
y1 = rel.fit.min$mean + rel.fit.min$sem,
angle = 90, length = 0.1, lwd = 2, col = "red")
arrows(x0 = rel.fit.min$time.x, y0 = rel.fit.min$mean,
y1 = rel.fit.min$mean - rel.fit.min$sem,
angle = 90, length=0.1, lwd = 2, col = "red")
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.5", "1.0", "1.5"), at = c(0.5, 1, 1.5))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0.5, 1, 1.5), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Ancestor", "ftsZ E315*"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Strain'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.45)
mtext(expression("Relative fitness ("~italic("W")~")"), side = 2,
outer = TRUE, cex = 1.5, line = -4, adj = 0.55)
# Add line segments
segments(rel.fit.wt$time.x[1], rel.fit.wt$mean[1], rel.fit.wt$time.x[2],
rel.fit.wt$mean[2], col = "blue", lwd = 2)
segments(rel.fit.min$time.x[1], rel.fit.min$mean[1], rel.fit.min$time.x[2],
rel.fit.min$mean[2], col = "red", lwd = 2)
# Add P-values
#mtext(expression("Timepoint:" ~italic("P")~"= 0.0003"), line = -2.5, cex = 0.80, at = 0.9)
#mtext(expression("Strain:" ~italic("P")~"< 0.0001"), line = -4.0, cex = 0.80, at = 0.75)
# Add strain identifier
text(3.9, rel.fit.wt$mean[1], labels = "Non-minimal", cex = 1.0)
text(3.8, rel.fit.min$mean[1], labels = "Minimal", cex = 1.0)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~/GitHub/MinimalCell/figures/FigExt3_small.change.png")
grid.raster(img)
