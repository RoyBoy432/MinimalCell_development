arrows(x0 = size.min.ftsZ$time.x, y0 = size.min.ftsZ$mean,
y1 = size.min.ftsZ$mean + size.min.ftsZ$sem,
angle = 90, length = 0.1, lwd = 2, col = "red")
arrows(x0 = size.min.ftsZ$time.x, y0 = size.min.ftsZ$mean,
y1 = size.min.ftsZ$mean - size.min.ftsZ$sem,
angle = 90, length=0.1, lwd = 2, col = "red")
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.00", "0.20", "0.40", "0.60"), at = c(0, 0.2, 0.4, 0.6))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0, 0.2, 0.4, 0.6), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Ancestor", "ftsZ E315*"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Timepoint'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.45)
mtext(expression(paste("Cell diameter (",mu, "m)")), side = 2,
outer = TRUE, cex = 1.5, line = -3, adj = 0.55)
# Add line segments
segments(size.wt.ftsZ$time.x[1], size.wt.ftsZ$mean[1], size.wt.ftsZ$time.x[2],
size.wt.ftsZ$mean[2], col = "blue", lwd = 2)
segments(size.min.ftsZ$time.x[1], size.min.ftsZ$mean[1], size.min.ftsZ$time.x[2],
size.min.ftsZ$mean[2], col = "red", lwd = 2)
# Add P-values
#mtext(expression("Timepoint x Strain:"), line = -2.5, cex = 0.8, at = 0.9)
#mtext(expression(~italic("P")~"< 0.0001"), line = -3.5, cex = 0.8, at = 0.9)
# Add strain identifier
text(3.9, size.wt.ftsZ$mean[2], labels = "Non-minimal", cex = 1.0)
text(3.8, size.min.ftsZ$mean[2], labels = "Minimal", cex = 1.0)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~/../GitHub/MinimalCell/figures/FigS4.png")
png(filename="~/GitHub/MinimalCell/figures/FigS4.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# Add Non-minimal points
plot(size.wt.ftsZ$time.x, size.wt.ftsZ$mean, xlim = c(0, 4.55),
ylim = c(0.0, .7), type = "p", pch = 21, bg = "blue",
col = "blue", cex = 2, ylab = "", xlab = "",
cex.lab = 1.5, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add minimal points
points(size.min.ftsZ$time.x, size.min.ftsZ$mean, pch = 21,
bg = "red", col = "red", lwd = 2, cex = 2)
# Add error bars
arrows(x0 = size.wt.ftsZ$time.x, y0 = size.wt.ftsZ$mean,
y1 = size.wt.ftsZ$mean + size.wt.ftsZ$sem,
angle = 90, length = 0.1, lwd = 2, col = "blue")
arrows(x0 = size.wt.ftsZ$time.x, y0 = size.wt.ftsZ$mean,
y1 = size.wt.ftsZ$mean - size.wt.ftsZ$sem,
angle = 90, length=0.1, lwd = 2, col = "blue")
arrows(x0 = size.min.ftsZ$time.x, y0 = size.min.ftsZ$mean,
y1 = size.min.ftsZ$mean + size.min.ftsZ$sem,
angle = 90, length = 0.1, lwd = 2, col = "red")
arrows(x0 = size.min.ftsZ$time.x, y0 = size.min.ftsZ$mean,
y1 = size.min.ftsZ$mean - size.min.ftsZ$sem,
angle = 90, length=0.1, lwd = 2, col = "red")
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.00", "0.20", "0.40", "0.60"), at = c(0, 0.2, 0.4, 0.6))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0, 0.2, 0.4, 0.6), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Ancestor", "ftsZ E315*"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Timepoint'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.45)
mtext(expression(paste("Cell diameter (",mu, "m)")), side = 2,
outer = TRUE, cex = 1.5, line = -3, adj = 0.55)
# Add line segments
segments(size.wt.ftsZ$time.x[1], size.wt.ftsZ$mean[1], size.wt.ftsZ$time.x[2],
size.wt.ftsZ$mean[2], col = "blue", lwd = 2)
segments(size.min.ftsZ$time.x[1], size.min.ftsZ$mean[1], size.min.ftsZ$time.x[2],
size.min.ftsZ$mean[2], col = "red", lwd = 2)
# Add P-values
#mtext(expression("Timepoint x Strain:"), line = -2.5, cex = 0.8, at = 0.9)
#mtext(expression(~italic("P")~"< 0.0001"), line = -3.5, cex = 0.8, at = 0.9)
# Add strain identifier
text(3.9, size.wt.ftsZ$mean[2], labels = "Non-minimal", cex = 1.0)
text(3.8, size.min.ftsZ$mean[2], labels = "Minimal", cex = 1.0)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~/GitHub/MinimalCell/figures/FigS4.png")
grid.raster(img)
size.reps
equal.var.anc.v <- var.test(s1_anc.reps$volume, B_anc.reps$volume)
rm(list=ls())
require("png")
require("dplyr")
require("grid")
sem <- function(x) sqrt(var(x)/length(x))
# Load data
size.raw <-read.csv("~/GitHub/MinimalCell/data/SEM_Stein_data/SEM_Stein_cases.csv")
size.raw <- as_tibble(size.raw)
colnames(size.raw) <- c("strain", "timepoint", "sub.strain", "diameter")
#colnames(size.raw_no.mutant) <- c("strain", "timepoint", "sub.strain", "diameter")
size.raw<-mutate(size.raw, volume = 4/3*pi*(diameter/2)^3)
size <- size.raw %>% group_by(strain, timepoint) %>% summarise(mean = mean(diameter), sem = sem(diameter), mean.v=mean(volume),sem.v=sem(volume))
size$strain <- as.factor(size$strain)
size$timepoint <- as.factor(size$timepoint)
fsize<-size %>% filter(timepoint!="Evolved")
esize<-size %>% filter(timepoint!="Mutant")
# Add x-values for plotting
time.x <- c(1,3,1,3)
fsize <- data.frame(fsize, time.x)
esize <- data.frame(esize, time.x)
# Add x-values for plotting
time.x <- c(1,3,1,3)
fsize <- data.frame(fsize, time.x)
esize <- data.frame(esize, time.x)
## Tests significance
```{r}
# Subset data
size.reps <- size.raw %>%
dplyr::select(strain, timepoint, sub.strain, diameter, volume) %>%
group_by(timepoint, strain, sub.strain) %>%
summarize(mean.diam = mean(diameter),mean.vol=mean(volume))
s1_anc.reps <- filter(size.raw, sub.strain == "s1_anc")
B_anc.reps <- filter(size.raw, sub.strain == "B_anc")
equal.var.anc <- var.test(s1_anc.reps$diameter, B_anc.reps$diameter)
anc.t.test <- t.test(x = s1_anc.reps$diameter, B_anc.reps$diameter, alternative = "two.sided", var.equal = TRUE, mu = 0)
s1_ftsZ.reps <- filter(size.raw, sub.strain == "s1_ftsZ")
B_ftsZ.reps <- filter(size.raw, sub.strain == "B_ftsZ")
equal.var.s1.ftsZ <- var.test(s1_anc.reps$diameter, s1_ftsZ.reps$diameter)
s1.ftsZ.t.test <- t.test(x = s1_anc.reps$diameter, s1_ftsZ.reps$diameter, alternative = "two.sided", var.equal = TRUE, mu = 0)
equal.var.B.ftsZ <- var.test(B_anc.reps$diameter, B_ftsZ.reps$diameter)
B.ftsZ.t.test <- t.test(x = B_anc.reps$diameter, B_ftsZ.reps$diameter, alternative = "two.sided", var.equal = FALSE, mu = 0)
evo.reps <- filter(size.reps, timepoint == "Evolved") %>%
group_by(strain, sub.strain)
equal.var.evo <- var.test(evo.reps$mean.diam[1:4], evo.reps$mean.diam[5:8])
evo.t.test <- t.test(evo.reps$mean.diam ~ evo.reps$strain, var.equal = T)
# Difference in cell size between Non-minimal ancestor and Non-minimal evolved lines?
s1_delta.t.test <- t.test(x = evo.reps$mean.diam[5:8], mu = size.reps$mean.diam[2], alternative = 'two.sided')
# Difference in cell size between minimal ancestor and minimal evolved lines?
B_delta.t.test <- t.test(x = evo.reps$mean.diam[1:4], mu = size.reps$mean.diam[1], alternative = 't')
equal.var.anc.v <- var.test(s1_anc.reps$volume, B_anc.reps$volume)
anc.t.test <- t.test(x = s1_anc.reps$diameter, B_anc.reps$diameter, alternative = "two.sided", var.equal = TRUE, mu = 0)
equal.var.anc.v
anc.t.test.v <- t.test(x = s1_anc.reps$volume, B_anc.reps$volume, alternative = "two.sided", var.equal = F, mu = 0)
anc.t.test.v
s1_ftsZ.reps
equal.var.s1.ftsZ.v <- var.test(s1_anc.reps$volume, s1_ftsZ.reps$volume)
equal.var.s1.ftsZ.v
s1.ftsZ.t.test.v <- t.test(x = s1_anc.reps$volume, s1_ftsZ.reps$volume, alternative = "two.sided", var.equal = F, mu = 0)
s1.ftsZ.t.test.v
equal.var.B.ftsZ.v <- var.test(B_anc.reps$volume, B_ftsZ.reps$volume)
equal.var.B.ftsZ.v
B.ftsZ.t.test.v <- t.test(x = B_anc.reps$volume, B_ftsZ.reps$volume, alternative = "two.sided", var.equal = FALSE, mu = 0)
B.ftsZ.t.test.v
evo.reps
equal.var.evo.v <- var.test(evo.reps$mean.vol[1:4], evo.reps$mean.vol[5:8])
equal.var.evo.v
evo.t.test.v <- t.test(evo.reps$mean.vol ~ evo.reps$strain, var.equal = F)
evo.t.test.v
# Difference in cell vol between Non-minimal ancestor and Non-minimal evolved lines?
s1_delta.t.test.v <- t.test(x = evo.reps$mean.vol[5:8], mu = size.reps$mean.vol[2], alternative = 'two.sided')
s1_delta.t.test.v
# Difference in cell size between minimal ancestor and minimal evolved lines?
B_delta.t.test.v <- t.test(x = evo.reps$mean.vol[1:4], mu = size.reps$mean.vol[1], alternative = 't')
B_delta.t.test.v
rm(list=ls())
getwd()
setwd("~/GitHub/MinimalCell")
require("png")
require("dplyr")
require("grid")
LL.95 <- function(x) t.test(x)$conf.int[1]
UL.95 <- function(x) t.test(x)$conf.int[2]
sem <- function(x) sqrt(var(x)/length(x))
dnds <- read.csv("~/GitHub/MinimalCell/datafiles/cases_Mm.300.csv")
colnames(dnds)[12] <- "dnds"
colnames(dnds)[2] <- "strain"
# Convert strain to factor
dnds$strain <- as.factor(dnds$strain)
# Add x-values for plotting
x <- c(1,1,1,1,3,3,3,3)
dnds <- data.frame(dnds, x)
# Subset dN/dS by strain and summary statistics
dnds.wt  <- filter(dnds, strain == "Non-minimal") %>%
dplyr::select(strain, dnds, x)
dnds.min  <- filter(dnds, strain == "Minimal") %>%
dplyr::select(strain, dnds, x)
median.dnds.wt <-median(dnds.wt$dnds)
LL.95.dnds.wt <- LL.95(dnds.wt$dnds)
UL.95.dnds.wt <- UL.95(dnds.wt$dnds)
mean.dnds.wt<-mean(dnds.wt$dnds)
sem.dnds.wt<-sem(dnds.wt$dnds)
median.dnds.min <-median(dnds.min$dnds)
LL.95.dnds.min <- LL.95(dnds.min$dnds)
UL.95.dnds.min <- UL.95(dnds.min$dnds)
mean.dnds.min<-mean(dnds.min$dnds)
sem.dnds.min<-sem(dnds.min$dnds)
# Non-minimal data: essential vs. non-essential
dndds.nonmin <- read.csv("~/GitHub/MinimalCell/datafiles/non-minimal.DNDS_freqs.csv")
equal.var <- var.test(dnds.wt$dnds, dnds.min$dnds)
# Test for equal variance : P = 0.283 --> homogeneous variance
dnds.ttest <- t.test(dnds.wt$dnds, dnds.min$dnds, var.equal = TRUE, alternative = 'two.sided')
# Results: t = -1.1822, df = 6, p-value = 0.2818 --> no difference
# Non-minimal: essential vs. non-essential
dnds.nomin.ttest <- t.test(x = dndds.nonmin$dNdS_gdtools[1:4], y = dndds.nonmin$dNdS_gdtools[5:8],
mu = 0, alternative ="two.sided", paired = TRUE)
# Results: t = -1.0928, df = 3, p-value = 0.3544 --> no difference
# Non-minimal: non-essential dN/dS different from 1?
dnds.nomin.nonessential.ttest <- t.test(dndds.nonmin$dNdS_gdtools[1:4], mu = 1, alternative ="two.sided")
# Results: t = -1.3522, df = 3, p-value = 0.2692. Not different from neutral
# Non-minimal: essential dN/dS different from 1?
dnds.nomin.essential.ttest <- t.test(dndds.nonmin$dNdS_gdtools[5:8], mu = 1, alternative ="two.sided")
# Results: t = 0.45194, df = 3, p-value = 0.682. Not different from neutral
var.test(dnds.wt$dnds, dnds.min$dnds)
t.test(dnds.wt$dnds, dnds.min$dnds, var.equal = TRUE, alternative = 'two.sided')
t.test(x = dndds.nonmin$dNdS_gdtools[1:4], y = dndds.nonmin$dNdS_gdtools[5:8],
mu = 0, alternative ="two.sided", paired = TRUE)
t.test(dndds.nonmin$dNdS_gdtools[1:4], mu = 1, alternative ="two.sided")
t.test(dndds.nonmin$dNdS_gdtools[5:8], mu = 1, alternative ="two.sided")
png(filename="~/GitHub/MinimalCell/figures/FigExt2.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# Add Non-minimal points
plot(jitter(rep(1, length(dnds.wt$dnds)), amount = 0.2), dnds.wt$dnds,
xlim = c(0, 4), ylim = c(0.0, 3.5), type = "p", pch = 21, bg = "lightblue",
col = "lightblue", cex = 1.0, ylab = "", xlab = "",
cex.lab = 2.0, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add horizontal line
abline(h = 1, col="darkgray", lty = 2, lwd = 2)
# Add minimal points
points(jitter(rep(3, length(dnds.min$dnds)), amount = 0.2), dnds.min$dnds,
pch = 21, bg = "pink", col = "pink", lwd = 2, cex = 1.0)
# Add confidence intervals
arrows(x0 = c(1), y0 = mean.dnds.wt, y1 = mean.dnds.wt + sem.dnds.wt, angle = 90,
length = 0.1, lwd = 2, col = "blue")
arrows(x0 = c(1), y0 = mean.dnds.wt, y1 = mean.dnds.wt - sem.dnds.wt, angle = 90,
length=0.1, lwd = 2, col = "blue")
arrows(x0 = c(3), y0 = mean.dnds.min, y1 = mean.dnds.min + sem.dnds.min, angle = 90,
length = 0.1, lwd = 2, col = "red")
arrows(x0 = c(3), y0 = mean.dnds.min, y1 = mean.dnds.min - sem.dnds.min, angle = 90,
length=0.1, lwd = 2, col = "red")
# Add means
points(1, mean.dnds.wt, pch = 22, col = "blue",
bg = "blue", lwd = 2, cex = 2)
points(3, mean.dnds.min, pch = 22, col = "red",
bg = "red", lwd = 2, cex = 2)
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.0", "1.0", "2.0", "3.0"), at = c(0,1, 2, 3))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0, 1, 2, 3), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Non-minimal", "Minimal"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Strain'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.5)
mtext(expression(italic("dN/dS")), side = 2,
outer = TRUE, cex = 1.5, line = -3.0)
# Add P-values
mtext(expression(~italic("P")~"= 0.282"), line = -2.0, cex = 1.0, at = 0.5)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~/GitHub/MinimalCell/figures/FigExt2.png")
grid.raster(img)
png(filename="~/GitHub/MinimalCell/figures/FigExt2.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# Add Non-minimal points
plot(jitter(rep(1, length(dnds.wt$dnds)), amount = 0.2), dnds.wt$dnds,
xlim = c(0, 4), ylim = c(0.0, 3.5), type = "p", pch = 21, bg = "lightblue",
col = "lightblue", cex = 1.0, ylab = "", xlab = "",
cex.lab = 2.0, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add horizontal line
abline(h = 1, col="darkgray", lty = 2, lwd = 2)
# Add minimal points
points(jitter(rep(3, length(dnds.min$dnds)), amount = 0.2), dnds.min$dnds,
pch = 21, bg = "pink", col = "pink", lwd = 2, cex = 1.0)
# Add confidence intervals
arrows(x0 = c(1), y0 = mean.dnds.wt, y1 = mean.dnds.wt + sem.dnds.wt, angle = 90,
length = 0.1, lwd = 2, col = "blue")
arrows(x0 = c(1), y0 = mean.dnds.wt, y1 = mean.dnds.wt - sem.dnds.wt, angle = 90,
length=0.1, lwd = 2, col = "blue")
arrows(x0 = c(3), y0 = mean.dnds.min, y1 = mean.dnds.min + sem.dnds.min, angle = 90,
length = 0.1, lwd = 2, col = "red")
arrows(x0 = c(3), y0 = mean.dnds.min, y1 = mean.dnds.min - sem.dnds.min, angle = 90,
length=0.1, lwd = 2, col = "red")
# Add means
points(1, mean.dnds.wt, pch = 22, col = "blue",
bg = "blue", lwd = 2, cex = 2)
points(3, mean.dnds.min, pch = 22, col = "red",
bg = "red", lwd = 2, cex = 2)
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.0", "1.0", "2.0", "3.0"), at = c(0,1, 2, 3))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0, 1, 2, 3), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Non-minimal", "Minimal"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Strain'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.5)
mtext(expression(italic("dN/dS")), side = 2,
outer = TRUE, cex = 1.5, line = -3.0)
# Add P-values
mtext(expression(~italic("P")~"= 0.488"), line = -2.0, cex = 1.0, at = 0.5)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~/GitHub/MinimalCell/figures/FigExt2.png")
grid.raster(img)
rm(list=ls())
getwd()
setwd("~/GitHub/MinimalCell")
require("png")
require("dplyr")
require("grid")
LL.95 <- function(x) t.test(x)$conf.int[1]
UL.95 <- function(x) t.test(x)$conf.int[2]
sem <- function(x) sqrt(var(x)/length(x))
dnds <- read.csv("~/GitHub/MinimalCell/datafiles/cases_Mm.300.csv")
colnames(dnds)[12] <- "dnds"
colnames(dnds)[2] <- "strain"
# Convert strain to factor
dnds$strain <- as.factor(dnds$strain)
# Add x-values for plotting
x <- c(1,1,1,1,3,3,3,3)
dnds <- data.frame(dnds, x)
# Subset dN/dS by strain and summary statistics
dnds.wt  <- filter(dnds, strain == "Non-minimal") %>%
dplyr::select(strain, dnds, x)
dnds.min  <- filter(dnds, strain == "Minimal") %>%
dplyr::select(strain, dnds, x)
median.dnds.wt <-median(dnds.wt$dnds)
LL.95.dnds.wt <- LL.95(dnds.wt$dnds)
UL.95.dnds.wt <- UL.95(dnds.wt$dnds)
mean.dnds.wt<-mean(dnds.wt$dnds)
sem.dnds.wt<-sem(dnds.wt$dnds)
median.dnds.min <-median(dnds.min$dnds)
LL.95.dnds.min <- LL.95(dnds.min$dnds)
UL.95.dnds.min <- UL.95(dnds.min$dnds)
mean.dnds.min<-mean(dnds.min$dnds)
sem.dnds.min<-sem(dnds.min$dnds)
# Non-minimal data: essential vs. non-essential
dndds.nonmin <- read.csv("~/GitHub/MinimalCell/datafiles/non-minimal.DNDS_freqs.csv")
equal.var <- var.test(dnds.wt$dnds, dnds.min$dnds)
# Test for equal variance : P = 0.170 --> homogeneous variance
dnds.ttest <- t.test(dnds.wt$dnds, dnds.min$dnds, var.equal = TRUE, alternative = 'two.sided')
# Results: t = 0.81011, df = 6, p-value = 0.488 --> no difference
# Non-minimal: essential vs. non-essential
dnds.nomin.ttest <- t.test(x = dndds.nonmin$dNdS_gdtools[1:4], y = dndds.nonmin$dNdS_gdtools[5:8],
mu = 0, alternative ="two.sided", paired = TRUE)
# Results: t = -0.91262, df = 3, p-value = 0.4287 --> no difference
# Non-minimal: non-essential dN/dS different from 1?
dnds.nomin.nonessential.ttest <- t.test(dndds.nonmin$dNdS_gdtools[1:4], mu = 1, alternative ="two.sided")
# Results: t = -4.5473, df = 3, p-value = 0.01992. Yes, different from neutral
# Non-minimal: essential dN/dS different from 1?
dnds.nomin.essential.ttest <- t.test(dndds.nonmin$dNdS_gdtools[5:8], mu = 1, alternative ="two.sided")
# Results: t = -2.0872, df = 3, p-value = 0.1281. Not different from neutral
View(dndds.nonmin)
nonessdf<-filter(dndds.nonmin,Genomepartition=="nonessential")
View(nonessdf)
essdf<-filter(dndds.nonmin,Genomepartition=="essential")
colnames(nonessdf)[4] <- "dnds"
View(nonessdf)
colnames(essdf)[4] <- "dnds"
# Make figure
nonessdf<-filter(dndds.nonmin,Genomepartition=="nonessential")
colnames(nonessdf)[4] <- "dnds"
essdf<-filter(dndds.nonmin,Genomepartition=="essential")
colnames(essdf)[4] <- "dnds"
median.dnds.noness <-median(nonessdf$dnds)
LL.95.dnds.noness <- LL.95(nonessdf$dnds)
UL.95.dnds.noness <- UL.95(nonessdf$dnds)
mean.dnds.noness<-mean(nonessdf$dnds)
sem.dnds.noness<-sem(nonessdf$dnds)
median.dnds.ess <-median(essdf$dnds)
LL.95.dnds.ess <- LL.95(essdf$dnds)
UL.95.dnds.ess <- UL.95(essdf$dnds)
mean.dnds.ess<-mean(essdf$dnds)
sem.dnds.ess<-sem(essdf$dnds)
png(filename="~/GitHub/MinimalCell/figures/FigS7.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# Add nonessential points
plot(jitter(rep(1, length(nonessdf$dnds)), amount = 0.2), nonessdf$dnds,
xlim = c(0, 4), ylim = c(0.0, 3.5), type = "p", pch = 21, bg = "lightblue",
col = "lightblue", cex = 1.0, ylab = "", xlab = "",
cex.lab = 2.0, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add horizontal line
abline(h = 1, col="darkgray", lty = 2, lwd = 2)
# Add essential points
points(jitter(rep(3, length(essdf$dnds)), amount = 0.2), essdf$dnds,
pch = 21, bg = "pink", col = "pink", lwd = 2, cex = 1.0)
# Add confidence intervals
arrows(x0 = c(1), y0 = mean.dnds.noness, y1 = mean.dnds.noness + sem.dnds.noness, angle = 90,
length = 0.1, lwd = 2, col = "blue")
arrows(x0 = c(1), y0 = mean.dnds.noness, y1 = mean.dnds.noness - sem.dnds.noness, angle = 90,
length=0.1, lwd = 2, col = "blue")
arrows(x0 = c(3), y0 = mean.dnds.ess, y1 = mean.dnds.ess + sem.dnds.ess, angle = 90,
length = 0.1, lwd = 2, col = "red")
arrows(x0 = c(3), y0 = mean.dnds.ess, y1 = mean.dnds.ess - sem.dnds.ess, angle = 90,
length=0.1, lwd = 2, col = "red")
# Add means
points(1, mean.dnds.noness, pch = 22, col = "blue",
bg = "blue", lwd = 2, cex = 2)
points(3, mean.dnds.ess, pch = 22, col = "red",
bg = "red", lwd = 2, cex = 2)
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.0", "1.0", "2.0", "3.0"), at = c(0,1, 2, 3))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0, 1, 2, 3), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Nonessential", "Essential"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Partition'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.5)
mtext(expression(italic("dN/dS")), side = 2,
outer = TRUE, cex = 1.5, line = -3.0)
# Add P-values
mtext(expression(~italic("P")~"= 0.429"), line = -2.0, cex = 1.0, at = 0.5)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~/GitHub/MinimalCell/figures/FigS7.png")
grid.raster(img)
# Make figure
nonessdf<-filter(dndds.nonmin,Genomepartition=="nonessential")
colnames(nonessdf)[4] <- "dnds"
essdf<-filter(dndds.nonmin,Genomepartition=="essential")
colnames(essdf)[4] <- "dnds"
median.dnds.noness <-median(nonessdf$dnds)
LL.95.dnds.noness <- LL.95(nonessdf$dnds)
UL.95.dnds.noness <- UL.95(nonessdf$dnds)
mean.dnds.noness<-mean(nonessdf$dnds)
sem.dnds.noness<-sem(nonessdf$dnds)
median.dnds.ess <-median(essdf$dnds)
LL.95.dnds.ess <- LL.95(essdf$dnds)
UL.95.dnds.ess <- UL.95(essdf$dnds)
mean.dnds.ess<-mean(essdf$dnds)
sem.dnds.ess<-sem(essdf$dnds)
png(filename="~/GitHub/MinimalCell/figures/FigS7.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# Add nonessential points
plot(jitter(rep(1, length(nonessdf$dnds)), amount = 0.2), nonessdf$dnds,
xlim = c(0, 4), ylim = c(0.0, 2.5), type = "p", pch = 21, bg = "lightblue",
col = "lightblue", cex = 1.0, ylab = "", xlab = "",
cex.lab = 2.0, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add horizontal line
abline(h = 1, col="darkgray", lty = 2, lwd = 2)
# Add essential points
points(jitter(rep(3, length(essdf$dnds)), amount = 0.2), essdf$dnds,
pch = 21, bg = "pink", col = "pink", lwd = 2, cex = 1.0)
# Add confidence intervals
arrows(x0 = c(1), y0 = mean.dnds.noness, y1 = mean.dnds.noness + sem.dnds.noness, angle = 90,
length = 0.1, lwd = 2, col = "blue")
arrows(x0 = c(1), y0 = mean.dnds.noness, y1 = mean.dnds.noness - sem.dnds.noness, angle = 90,
length=0.1, lwd = 2, col = "blue")
arrows(x0 = c(3), y0 = mean.dnds.ess, y1 = mean.dnds.ess + sem.dnds.ess, angle = 90,
length = 0.1, lwd = 2, col = "red")
arrows(x0 = c(3), y0 = mean.dnds.ess, y1 = mean.dnds.ess - sem.dnds.ess, angle = 90,
length=0.1, lwd = 2, col = "red")
# Add means
points(1, mean.dnds.noness, pch = 22, col = "blue",
bg = "blue", lwd = 2, cex = 2)
points(3, mean.dnds.ess, pch = 22, col = "red",
bg = "red", lwd = 2, cex = 2)
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.0", "1.0", "2.0"), at = c(0,1, 2))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0, 1, 2, 3), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Nonessential", "Essential"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Partition'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.5)
mtext(expression(italic("dN/dS")), side = 2,
outer = TRUE, cex = 1.5, line = -3.0)
# Add P-values
mtext(expression(~italic("P")~"= 0.429"), line = -2.0, cex = 1.0, at = 0.5)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~/GitHub/MinimalCell/figures/FigS7.png")
grid.raster(img)
